{% if not modules -%}
# Terraform Project - {{ args.project_name }}

Welcome to your `{{ args.project_name }}` project. The following details outline
this project.

> NOTE: Ensure that you do not put any secret variables anywhere other than
> in `secrets.yml` and use the `--secrets` argument. The variables in this outline
> **SHOULD** only contain non-private information.

## Environments

Environments represent such things as: `development`, `staging`, and `production`.

```yaml
{{ args.environments|to_yaml }}
```

## Backends

> NOTE: From [https://www.terraform.io/docs/backends/index.html](https://www.terraform.io/docs/backends/index.html)

A `backend` in Terraform determines how state is loaded and how an operation
such as apply is executed. This abstraction enables non-local file state
storage, remote execution, etc.

By default, Terraform uses the `local` backend, which is the normal behavior of
Terraform you're used to.

```yaml
{{ args.backends|to_yaml }}
```

## Providers

> NOTE: From [https://www.terraform.io/docs/providers/index.html](https://www.terraform.io/docs/providers/index.html)

Terraform is used to create, manage, and update infrastructure resources such
as physical machines, VMs, network switches, containers, and more. Almost any
infrastructure type can be represented as a resource in Terraform. A provider
is responsible for understanding API interactions and exposing resources.
Providers generally are an IaaS (e.g. Alibaba Cloud, AWS, GCP, Microsoft Azure,
OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Cloud,
DNSimple, Cloudflare).

### Resources

> NOTE: From [https://www.terraform.io/docs/configuration/resources.html](https://www.terraform.io/docs/configuration/resources.html)

Resources are the most important element in the Terraform language. Each
resource block describes one or more infrastructure objects, such as
virtual networks, compute instances, or higher-level components such as DNS
records.

```yaml
{{ args.providers|to_yaml }}
```

## Modules

> NOTE: From [https://www.terraform.io/docs/modules/index.html](https://www.terraform.io/docs/modules/index.html)

A module is a container for multiple resources that are used together. Modules
can be used to create lightweight abstractions, so that you can describe your
infrastructure in terms of its architecture, rather than directly in terms of
physical objects.

```yaml
{{ args.modules|to_yaml }}
```

## Project Structure

```bash
{{ args.project_name }}
|-- LICENSE.md
|-- README.md
|-- environments
{%- for item in args.environments %}
{%-   if not loop.last %}
|  |-- {{ item }}
|  |  |-- LICENSE.md
|  |  |-- README.md
|  |  |-- main.tf
|  |  |-- resources.tf
|  |  |-- variables.tf
{%-     else %}
|  |-- {{ item }}
|     |-- LICENSE.md
|     |-- README.md
|     |-- main.tf
|     |-- resources.tf
|     |-- variables.tf
{%-     endif %}
{%- endfor %}
|-- main.tf
{%- if args.modules != {} %}
|-- modules
{%- for item in args.modules %}
{%-   if not loop.last %}
|  |-- {{ item }}
|  |  |-- LICENSE.md
|  |  |-- README.md
|  |  |-- main.tf
|  |  |-- resources.tf
|  |  |-- variables.tf
{%-     else %}
|  |-- {{ item }}
|     |-- LICENSE.md
|     |-- README.md
|     |-- main.tf
|     |-- resources.tf
|     |-- variables.tf
{%-   endif %}
{%- endfor %}
|-- requirements-dev.txt
|-- requirements.txt
|-- resources.tf
|-- variables.tf
{% endif %}
```

## Terraform Graph

Below is a graph of your Terraform configuration.

![{{ args.project_name }} - Graph]({{ args.project_name }}.jpg)


{%- else -%}
# Terraform Project - {{ args.project_name }} - Module {{ module }}

## Module Info

```yaml
{%  if args['modules'][module] is defined %}
{%-   set module_info = {module: args['modules'][module]} -%}
{%  else -%}
{%-   set module_info = {module: args['environments'][module]} -%}
{%  endif -%}
{{ module_info|to_yaml }}
```
{%- endif %}

> NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder
