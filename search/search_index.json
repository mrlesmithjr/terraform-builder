{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Terraform Builder Welcome to Terraform Builder. Terraform builder is based on a similar concept of Packer Builder . Why Terraform Builder But, Terraform is simple already right? Of course it it! So, why do we need Terraform Builder? Simple! To make generating configurations more consumable. Problems That Terraform Builder Solves Removing the complexities of Terraform HCL, etc. Using Terraform Builder Is using Terraform Builder easy? Of course it is. But first we need to explore some of the concepts. Concepts One of the major concepts of Terraform Builder is, to keep configurations as agnostic as possible. For example, defining resources should be done in a way that is not provider specific. By simply setting a variable to the desired provider, the magic happens on the backend for the translation. Configurations Configurations are defined in YAML, and must follow a specific format. By doing this, we can ensure that we have consistency in our Terraform configurations. We use configs.yml but the filename can be anything you wish. However, if the content must be consistent. Example Configuration Below is an example of our configs.yml : --- # This is an example config layout # Defines project name which becomes parent root directory project_name: example # Define backends backends: local: {} remote: {} # Defines environments environments: development: {} production: {} staging: {} # Define global variables global_variables: {} # Define modules - Structure will be project_name/modules/{module} # root needs to always exist modules: root: {} network: {} services: {} # Define providers and variables providers: AzureRM: variables: azurerm_environment: type: string description: AzureRM Environment default: public azurerm_features: description: Customize the behaviour of certain Azure Provider resources. default: {} azurerm_subscription_id: type: string description: AzureRM Subscription ID default: \"\" azurerm_tenant_id: type: string description: AzureRM Tenant ID default: \"\" DigitalOcean: variables: do_api_endpoint: type: string description: This can be used to override the base URL for DigitalOcean API requests default: https://api.digitalocean.com do_image: type: string description: Default DigitalOcean droplet image default: ubuntu-18-04-x64 do_region: type: string description: DigitalOcean region default: nyc1 do_ssh_keys: type: string description: DigitalOcean SSH keys to deploy to new droplets default: [] do_token: type: string description: This is the DO API token default: \"\" vSphere: variables: vsphere_allow_unverified_ssl: type: bool description: Boolean that can be set to true to disable SSL certificate verification default: \"false\" vsphere_compute_cluster: type: string description: Compute cluster to use by default default: \"\" vsphere_datacenter: type: string description: Datacenter to use by default default: \"\" vsphere_network: type: string description: Network to use by default default: \"\" vsphere_password: type: string description: Password for vSphere API operations default: \"\" vsphere_resource_pool: type: string description: The resource pool to put virtual machine's in default: \"\" vsphere_server: type: string description: vCenter server name for vSphere API operations default: \"\" vsphere_username: type: string description: Username for vSphere API operations default: \"\" # Define required resources including provider and module # Resources are defined in an agnostic way to ensure portability # between providers. resources: projects: TerraformCloud: description: Terraform Cloud Project environment: development module: root provider: DigitalOcean purpose: Terraform Cloud Project resources: [] tags: - test vms: test-do-root: count: 1 memory: 1024 module: root num_cpus: 1 provider: DigitalOcean tags: - test-digitalocean - test-digitalocean-root test-do-network: count: 1 memory: 1024 module: network num_cpus: 1 provider: DigitalOcean tags: - test-digitalocean - test-vsphere-network test-vs-root: count: 1 memory: 2048 module: root num_cpus: 1 provider: vSphere tags: - test-vsphere - test-vsphere-root test-vs-services: count: 1 memory: 1024 module: services num_cpus: 2 provider: vSphere tags: - test-vsphere - test-vsphere-services","title":"Terraform Builder"},{"location":"#terraform-builder","text":"Welcome to Terraform Builder. Terraform builder is based on a similar concept of Packer Builder .","title":"Terraform Builder"},{"location":"#why-terraform-builder","text":"But, Terraform is simple already right? Of course it it! So, why do we need Terraform Builder? Simple! To make generating configurations more consumable.","title":"Why Terraform Builder"},{"location":"#problems-that-terraform-builder-solves","text":"Removing the complexities of Terraform HCL, etc.","title":"Problems That Terraform Builder Solves"},{"location":"#using-terraform-builder","text":"Is using Terraform Builder easy? Of course it is. But first we need to explore some of the concepts.","title":"Using Terraform Builder"},{"location":"#concepts","text":"One of the major concepts of Terraform Builder is, to keep configurations as agnostic as possible. For example, defining resources should be done in a way that is not provider specific. By simply setting a variable to the desired provider, the magic happens on the backend for the translation.","title":"Concepts"},{"location":"#configurations","text":"Configurations are defined in YAML, and must follow a specific format. By doing this, we can ensure that we have consistency in our Terraform configurations. We use configs.yml but the filename can be anything you wish. However, if the content must be consistent.","title":"Configurations"},{"location":"#example-configuration","text":"Below is an example of our configs.yml : --- # This is an example config layout # Defines project name which becomes parent root directory project_name: example # Define backends backends: local: {} remote: {} # Defines environments environments: development: {} production: {} staging: {} # Define global variables global_variables: {} # Define modules - Structure will be project_name/modules/{module} # root needs to always exist modules: root: {} network: {} services: {} # Define providers and variables providers: AzureRM: variables: azurerm_environment: type: string description: AzureRM Environment default: public azurerm_features: description: Customize the behaviour of certain Azure Provider resources. default: {} azurerm_subscription_id: type: string description: AzureRM Subscription ID default: \"\" azurerm_tenant_id: type: string description: AzureRM Tenant ID default: \"\" DigitalOcean: variables: do_api_endpoint: type: string description: This can be used to override the base URL for DigitalOcean API requests default: https://api.digitalocean.com do_image: type: string description: Default DigitalOcean droplet image default: ubuntu-18-04-x64 do_region: type: string description: DigitalOcean region default: nyc1 do_ssh_keys: type: string description: DigitalOcean SSH keys to deploy to new droplets default: [] do_token: type: string description: This is the DO API token default: \"\" vSphere: variables: vsphere_allow_unverified_ssl: type: bool description: Boolean that can be set to true to disable SSL certificate verification default: \"false\" vsphere_compute_cluster: type: string description: Compute cluster to use by default default: \"\" vsphere_datacenter: type: string description: Datacenter to use by default default: \"\" vsphere_network: type: string description: Network to use by default default: \"\" vsphere_password: type: string description: Password for vSphere API operations default: \"\" vsphere_resource_pool: type: string description: The resource pool to put virtual machine's in default: \"\" vsphere_server: type: string description: vCenter server name for vSphere API operations default: \"\" vsphere_username: type: string description: Username for vSphere API operations default: \"\" # Define required resources including provider and module # Resources are defined in an agnostic way to ensure portability # between providers. resources: projects: TerraformCloud: description: Terraform Cloud Project environment: development module: root provider: DigitalOcean purpose: Terraform Cloud Project resources: [] tags: - test vms: test-do-root: count: 1 memory: 1024 module: root num_cpus: 1 provider: DigitalOcean tags: - test-digitalocean - test-digitalocean-root test-do-network: count: 1 memory: 1024 module: network num_cpus: 1 provider: DigitalOcean tags: - test-digitalocean - test-vsphere-network test-vs-root: count: 1 memory: 2048 module: root num_cpus: 1 provider: vSphere tags: - test-vsphere - test-vsphere-root test-vs-services: count: 1 memory: 1024 module: services num_cpus: 2 provider: vSphere tags: - test-vsphere - test-vsphere-services","title":"Example Configuration"},{"location":"example_builds/example/","text":"Terraform Project - example Welcome to your example project. The following details outline this project. NOTE: Ensure that you do not put any secret variables anywhere other than in secrets.yml and use the --secrets argument. The variables in this outline SHOULD only contain non-private information. Environments Environments represent such things as: development , staging , and production . development: {} production: {} staging: {} Backends NOTE: From https://www.terraform.io/docs/backends/index.html A backend in Terraform determines how state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc. By default, Terraform uses the local backend, which is the normal behavior of Terraform you're used to. local: {} remote: {} Providers NOTE: From https://www.terraform.io/docs/providers/index.html Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Almost any infrastructure type can be represented as a resource in Terraform. A provider is responsible for understanding API interactions and exposing resources. Providers generally are an IaaS (e.g. Alibaba Cloud, AWS, GCP, Microsoft Azure, OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Cloud, DNSimple, Cloudflare). AzureRM: variables: azurerm_environment: default: public description: AzureRM Environment type: string azurerm_features: default: {} description: Customize the behaviour of certain Azure Provider resources. azurerm_subscription_id: default: '' description: AzureRM Subscription ID type: string azurerm_tenant_id: default: '' description: AzureRM Tenant ID type: string DigitalOcean: variables: do_api_endpoint: default: https://api.digitalocean.com description: This can be used to override the base URL for DigitalOcean API requests type: string do_image: default: ubuntu-18-04-x64 description: Default DigitalOcean droplet image type: string do_region: default: nyc1 description: DigitalOcean region type: string do_ssh_keys: default: [] description: DigitalOcean SSH keys to deploy to new droplets type: string do_token: default: '' description: This is the DO API token type: string vSphere: variables: vsphere_allow_unverified_ssl: default: 'false' description: Boolean that can be set to true to disable SSL certificate verification type: bool vsphere_compute_cluster: default: '' description: Compute cluster to use by default type: string vsphere_datacenter: default: '' description: Datacenter to use by default type: string vsphere_network: default: '' description: Network to use by default type: string vsphere_password: default: '' description: Password for vSphere API operations type: string vsphere_resource_pool: default: '' description: The resource pool to put virtual machine's in type: string vsphere_server: default: '' description: vCenter server name for vSphere API operations type: string vsphere_username: default: '' description: Username for vSphere API operations type: string Modules NOTE: From https://www.terraform.io/docs/modules/index.html A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects. network: {} root: {} services: {} Resources NOTE: From https://www.terraform.io/docs/configuration/resources.html Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records. projects: TerraformCloud: description: Terraform Cloud Project environment: development module: root provider: DigitalOcean purpose: Terraform Cloud Project resources: [] tags: - test vms: test-do-network: count: 1 memory: 1024 module: network num_cpus: 1 provider: DigitalOcean tags: - test-digitalocean - test-vsphere-network test-do-root: count: 1 memory: 1024 module: root num_cpus: 1 provider: DigitalOcean tags: - test-digitalocean - test-digitalocean-root test-vs-root: count: 1 memory: 2048 module: root num_cpus: 1 provider: vSphere tags: - test-vsphere - test-vsphere-root test-vs-services: count: 1 memory: 1024 module: services num_cpus: 2 provider: vSphere tags: - test-vsphere - test-vsphere-services Global Variables {} Project Structure example |-- LICENSE.md |-- README.md |-- environments | |-- development | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- production | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- staging | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- main.tf |-- modules | |-- network | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- services | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- requirements-dev.txt |-- requirements.txt |-- resources.tf |-- variables.tf NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example"},{"location":"example_builds/example/#terraform-project-example","text":"Welcome to your example project. The following details outline this project. NOTE: Ensure that you do not put any secret variables anywhere other than in secrets.yml and use the --secrets argument. The variables in this outline SHOULD only contain non-private information.","title":"Terraform Project - example"},{"location":"example_builds/example/#environments","text":"Environments represent such things as: development , staging , and production . development: {} production: {} staging: {}","title":"Environments"},{"location":"example_builds/example/#backends","text":"NOTE: From https://www.terraform.io/docs/backends/index.html A backend in Terraform determines how state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc. By default, Terraform uses the local backend, which is the normal behavior of Terraform you're used to. local: {} remote: {}","title":"Backends"},{"location":"example_builds/example/#providers","text":"NOTE: From https://www.terraform.io/docs/providers/index.html Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Almost any infrastructure type can be represented as a resource in Terraform. A provider is responsible for understanding API interactions and exposing resources. Providers generally are an IaaS (e.g. Alibaba Cloud, AWS, GCP, Microsoft Azure, OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Cloud, DNSimple, Cloudflare). AzureRM: variables: azurerm_environment: default: public description: AzureRM Environment type: string azurerm_features: default: {} description: Customize the behaviour of certain Azure Provider resources. azurerm_subscription_id: default: '' description: AzureRM Subscription ID type: string azurerm_tenant_id: default: '' description: AzureRM Tenant ID type: string DigitalOcean: variables: do_api_endpoint: default: https://api.digitalocean.com description: This can be used to override the base URL for DigitalOcean API requests type: string do_image: default: ubuntu-18-04-x64 description: Default DigitalOcean droplet image type: string do_region: default: nyc1 description: DigitalOcean region type: string do_ssh_keys: default: [] description: DigitalOcean SSH keys to deploy to new droplets type: string do_token: default: '' description: This is the DO API token type: string vSphere: variables: vsphere_allow_unverified_ssl: default: 'false' description: Boolean that can be set to true to disable SSL certificate verification type: bool vsphere_compute_cluster: default: '' description: Compute cluster to use by default type: string vsphere_datacenter: default: '' description: Datacenter to use by default type: string vsphere_network: default: '' description: Network to use by default type: string vsphere_password: default: '' description: Password for vSphere API operations type: string vsphere_resource_pool: default: '' description: The resource pool to put virtual machine's in type: string vsphere_server: default: '' description: vCenter server name for vSphere API operations type: string vsphere_username: default: '' description: Username for vSphere API operations type: string","title":"Providers"},{"location":"example_builds/example/#modules","text":"NOTE: From https://www.terraform.io/docs/modules/index.html A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects. network: {} root: {} services: {}","title":"Modules"},{"location":"example_builds/example/#resources","text":"NOTE: From https://www.terraform.io/docs/configuration/resources.html Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records. projects: TerraformCloud: description: Terraform Cloud Project environment: development module: root provider: DigitalOcean purpose: Terraform Cloud Project resources: [] tags: - test vms: test-do-network: count: 1 memory: 1024 module: network num_cpus: 1 provider: DigitalOcean tags: - test-digitalocean - test-vsphere-network test-do-root: count: 1 memory: 1024 module: root num_cpus: 1 provider: DigitalOcean tags: - test-digitalocean - test-digitalocean-root test-vs-root: count: 1 memory: 2048 module: root num_cpus: 1 provider: vSphere tags: - test-vsphere - test-vsphere-root test-vs-services: count: 1 memory: 1024 module: services num_cpus: 2 provider: vSphere tags: - test-vsphere - test-vsphere-services","title":"Resources"},{"location":"example_builds/example/#global-variables","text":"{}","title":"Global Variables"},{"location":"example_builds/example/#project-structure","text":"example |-- LICENSE.md |-- README.md |-- environments | |-- development | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- production | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- staging | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- main.tf |-- modules | |-- network | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- services | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- requirements-dev.txt |-- requirements.txt |-- resources.tf |-- variables.tf NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Project Structure"},{"location":"example_builds/example/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/development/","text":"Terraform Project - example - Module development Module Info development: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module development"},{"location":"example_builds/example/environments/development/#terraform-project-example-module-development","text":"","title":"Terraform Project - example - Module development"},{"location":"example_builds/example/environments/development/#module-info","text":"development: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/development/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/production/","text":"Terraform Project - example - Module production Module Info production: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module production"},{"location":"example_builds/example/environments/production/#terraform-project-example-module-production","text":"","title":"Terraform Project - example - Module production"},{"location":"example_builds/example/environments/production/#module-info","text":"production: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/production/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/staging/","text":"Terraform Project - example - Module staging Module Info staging: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module staging"},{"location":"example_builds/example/environments/staging/#terraform-project-example-module-staging","text":"","title":"Terraform Project - example - Module staging"},{"location":"example_builds/example/environments/staging/#module-info","text":"staging: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/staging/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/modules/network/","text":"Terraform Project - example - Module network Module Info network: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module network"},{"location":"example_builds/example/modules/network/#terraform-project-example-module-network","text":"","title":"Terraform Project - example - Module network"},{"location":"example_builds/example/modules/network/#module-info","text":"network: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/modules/network/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/modules/services/","text":"Terraform Project - example - Module services Module Info services: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module services"},{"location":"example_builds/example/modules/services/#terraform-project-example-module-services","text":"","title":"Terraform Project - example - Module services"},{"location":"example_builds/example/modules/services/#module-info","text":"services: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/modules/services/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"}]}