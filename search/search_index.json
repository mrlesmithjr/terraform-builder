{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Terraform Builder Welcome to Terraform Builder. Terraform builder is based on a similar concept of Packer Builder . NOTE: This is highly under development and far from fully featured. About Terraform Builder Terraform Builder is completely open-source, and we welcome feedback, contributions, and recommendations. Start using Terraform Builder now, by heading over to https://github.com/mrlesmithjr/terraform-builder . Why Terraform Builder But, Terraform is simple already right? Of course it is! So, why do we need Terraform Builder? Simple! To make generating configurations more consumable. Terraform Builder also creates a majority of the documentation, etc. for your project by creating README.md files where appropriate and other important files such as .gitignore pre-populated for Terraform usage. Explore the example build to see the directory structure that is stamped out for you. Problems That Terraform Builder Solves Removing the complexities of Terraform HCL, etc. Moreover, standardizing Terraform configurations. By using Terraform Builder, it is easy to add or remove resources, etc. to ensure consistent functionality. Concepts One of the major concepts of Terraform Builder is, to keep configurations as agnostic as possible. For example, defining resources should be done in a way that is not provider specific. By simply setting a variable to the desired provider, the magic happens on the backend for the translation. With Terraform Builder, everything is a module. Therefore, all configurations are based off of this concept. This is not a new concept, as Terraform already assumes that a single directory of configurations is a module. This module is the root module. So, with the root module being the foundation to all other modules. However, we hang the root module off of the parent root (project root). Therefore the parent root becomes the passthrough module. The other concept enforced with Terraform Builder is environments. By default, environments are implemented as modules as well. These environments are: development , staging , and production . By automatically stitching these environments together with all other modules, removes the complexity of trying to do it manually. And at the same time ensuring that, by default we have our different environments accounted for from the start. Does any of this mean that Terraform Builder is the right tool for everyone? Absolutely not! However, it will hopefully enable those who may be starting out new with Terraform to implement best practices as part of their learning. As well as, their implementations.","title":"Terraform Builder"},{"location":"#terraform-builder","text":"Welcome to Terraform Builder. Terraform builder is based on a similar concept of Packer Builder . NOTE: This is highly under development and far from fully featured.","title":"Terraform Builder"},{"location":"#about-terraform-builder","text":"Terraform Builder is completely open-source, and we welcome feedback, contributions, and recommendations. Start using Terraform Builder now, by heading over to https://github.com/mrlesmithjr/terraform-builder .","title":"About Terraform Builder"},{"location":"#why-terraform-builder","text":"But, Terraform is simple already right? Of course it is! So, why do we need Terraform Builder? Simple! To make generating configurations more consumable. Terraform Builder also creates a majority of the documentation, etc. for your project by creating README.md files where appropriate and other important files such as .gitignore pre-populated for Terraform usage. Explore the example build to see the directory structure that is stamped out for you.","title":"Why Terraform Builder"},{"location":"#problems-that-terraform-builder-solves","text":"Removing the complexities of Terraform HCL, etc. Moreover, standardizing Terraform configurations. By using Terraform Builder, it is easy to add or remove resources, etc. to ensure consistent functionality.","title":"Problems That Terraform Builder Solves"},{"location":"#concepts","text":"One of the major concepts of Terraform Builder is, to keep configurations as agnostic as possible. For example, defining resources should be done in a way that is not provider specific. By simply setting a variable to the desired provider, the magic happens on the backend for the translation. With Terraform Builder, everything is a module. Therefore, all configurations are based off of this concept. This is not a new concept, as Terraform already assumes that a single directory of configurations is a module. This module is the root module. So, with the root module being the foundation to all other modules. However, we hang the root module off of the parent root (project root). Therefore the parent root becomes the passthrough module. The other concept enforced with Terraform Builder is environments. By default, environments are implemented as modules as well. These environments are: development , staging , and production . By automatically stitching these environments together with all other modules, removes the complexity of trying to do it manually. And at the same time ensuring that, by default we have our different environments accounted for from the start. Does any of this mean that Terraform Builder is the right tool for everyone? Absolutely not! However, it will hopefully enable those who may be starting out new with Terraform to implement best practices as part of their learning. As well as, their implementations.","title":"Concepts"},{"location":"01_setup/","text":"Setup Guide Requirements There are very few requirements required for Terraform Builder. But to get the most out of it, follow along. Clone Project First thing to do is, obtain the source for Terraform Builder. git clone https://github.com/mrlesmithjr/terraform-builder Python Packages NOTE: We highly recommend that you use a Python virtual environment for this! There are only a few required Python packages to install. And for that, we have included a requirements.txt in the project in which you just cloned above. And we can install them by executing: pip3 install -r requirements.txt Terraform Version Manager Terraform version manager is a tool that I use personally. It assists in easily managing different Terraform versions for you to use. Rather than installing a version, and then having to do some random things to switch between versions. Definitely check it out here . Installing Terraform Version Manager To install Terraform Version Manager execute: TFENV_DIR=\"$HOME/.tfenv\" git clone https://github.com/tfutils/tfenv.git $TFENV_DIR export PATH=\"$TFENV_DIR/bin:$PATH\" Installing Terraform Now that Terraform Version Manager is installed, we can install Terraform by executing: TERRAFORM_VERSION=\"0.12.23\" echo $TERRAFORM_VERSION > $HOME/.terraform-version tfenv install tfenv list TFLint When using Terraform Builder and TFLint is installed, we also ensure that the configurations pass Terraform linting. NOTE: TFLint is a Terraform linter focused on possible errors, best practices, etc. To install TFLint head over here for the instructions to do so. Graphviz Terraform Builder will generate a Terraform Graph and embed it into your project README.md if Graphviz is installed. So, it is recommended that you install Graphviz to get a visible graph in your project README.","title":"Setup Guide"},{"location":"01_setup/#setup-guide","text":"","title":"Setup Guide"},{"location":"01_setup/#requirements","text":"There are very few requirements required for Terraform Builder. But to get the most out of it, follow along.","title":"Requirements"},{"location":"01_setup/#clone-project","text":"First thing to do is, obtain the source for Terraform Builder. git clone https://github.com/mrlesmithjr/terraform-builder","title":"Clone Project"},{"location":"01_setup/#python-packages","text":"NOTE: We highly recommend that you use a Python virtual environment for this! There are only a few required Python packages to install. And for that, we have included a requirements.txt in the project in which you just cloned above. And we can install them by executing: pip3 install -r requirements.txt","title":"Python Packages"},{"location":"01_setup/#terraform-version-manager","text":"Terraform version manager is a tool that I use personally. It assists in easily managing different Terraform versions for you to use. Rather than installing a version, and then having to do some random things to switch between versions. Definitely check it out here .","title":"Terraform Version Manager"},{"location":"01_setup/#installing-terraform-version-manager","text":"To install Terraform Version Manager execute: TFENV_DIR=\"$HOME/.tfenv\" git clone https://github.com/tfutils/tfenv.git $TFENV_DIR export PATH=\"$TFENV_DIR/bin:$PATH\"","title":"Installing Terraform Version Manager"},{"location":"01_setup/#installing-terraform","text":"Now that Terraform Version Manager is installed, we can install Terraform by executing: TERRAFORM_VERSION=\"0.12.23\" echo $TERRAFORM_VERSION > $HOME/.terraform-version tfenv install tfenv list","title":"Installing Terraform"},{"location":"01_setup/#tflint","text":"When using Terraform Builder and TFLint is installed, we also ensure that the configurations pass Terraform linting. NOTE: TFLint is a Terraform linter focused on possible errors, best practices, etc. To install TFLint head over here for the instructions to do so.","title":"TFLint"},{"location":"01_setup/#graphviz","text":"Terraform Builder will generate a Terraform Graph and embed it into your project README.md if Graphviz is installed. So, it is recommended that you install Graphviz to get a visible graph in your project README.","title":"Graphviz"},{"location":"02_configuration/","text":"Configuration Constructs Configs Configurations are defined in YAML, and must follow a specific format. By doing this, we can ensure that we have consistency in our Terraform configurations. We use configs.yml but the filename can be anything you wish. However, the content must be consistent. Secrets Secrets are also defined in YAML, but are meant to be completely separate from configs to ensure they are indeed kept secret. We use secrets.yml , but once again, this can be anything you wish. Anything placed in secrets.yml will be created in the parent root folder as terraform.tfvars.json . Backends We can configure different Terraform backends to use for our Terraform state. Initially this functionality is limited to the default local and Consul . Consul support is limited and under development now. But you can use it for testing purposes until fully implemented. Environments Environments ensure that we account for each of: development , production , and staging . One major premise behind Terraform Builder is that environments are not an afterthought. Therefore, they are accounted for from the very beginning. Variable definitions can be specified differently for each environment as applicable as well. Modules Another major premise behind Terraform Builder is leveraging modules from the very beginning as well. We define our modules as desired, and they are automatically stitched together with our environments. As in environments, variable definitions can be specified differently between modules. The only required module is root. The root module is where all resources will be added if no other modules are defined. As mentioned before, in Terraform Builder, the root module hangs off of our parent root (project root). Providers Providers is where all of our Terrarom provider constructs are defined. The data model used for providers follows as closely to the native way of constructing objects as possible. This means that for example, you need to spin up a VM using the vSphere provider. The data model to get to the VM defintion, follows the order of parent objects required to do so. Resources Resources are where we can defined things such as VMs, resource groups, etc. For example, VMs are defined in an agnostic way in which you can cut/paste VM resources between providers. When doing this, the backend configurations are handled for us to translate to the specific provider. Therefore, minimizing the level of effort to port a VM. This is extremely poweful, and will likely transpire into other resource portability such as firewalls, load balancers, etc.","title":"Configuration Constructs"},{"location":"02_configuration/#configuration-constructs","text":"","title":"Configuration Constructs"},{"location":"02_configuration/#configs","text":"Configurations are defined in YAML, and must follow a specific format. By doing this, we can ensure that we have consistency in our Terraform configurations. We use configs.yml but the filename can be anything you wish. However, the content must be consistent.","title":"Configs"},{"location":"02_configuration/#secrets","text":"Secrets are also defined in YAML, but are meant to be completely separate from configs to ensure they are indeed kept secret. We use secrets.yml , but once again, this can be anything you wish. Anything placed in secrets.yml will be created in the parent root folder as terraform.tfvars.json .","title":"Secrets"},{"location":"02_configuration/#backends","text":"We can configure different Terraform backends to use for our Terraform state. Initially this functionality is limited to the default local and Consul . Consul support is limited and under development now. But you can use it for testing purposes until fully implemented.","title":"Backends"},{"location":"02_configuration/#environments","text":"Environments ensure that we account for each of: development , production , and staging . One major premise behind Terraform Builder is that environments are not an afterthought. Therefore, they are accounted for from the very beginning. Variable definitions can be specified differently for each environment as applicable as well.","title":"Environments"},{"location":"02_configuration/#modules","text":"Another major premise behind Terraform Builder is leveraging modules from the very beginning as well. We define our modules as desired, and they are automatically stitched together with our environments. As in environments, variable definitions can be specified differently between modules. The only required module is root. The root module is where all resources will be added if no other modules are defined. As mentioned before, in Terraform Builder, the root module hangs off of our parent root (project root).","title":"Modules"},{"location":"02_configuration/#providers","text":"Providers is where all of our Terrarom provider constructs are defined. The data model used for providers follows as closely to the native way of constructing objects as possible. This means that for example, you need to spin up a VM using the vSphere provider. The data model to get to the VM defintion, follows the order of parent objects required to do so.","title":"Providers"},{"location":"02_configuration/#resources","text":"Resources are where we can defined things such as VMs, resource groups, etc. For example, VMs are defined in an agnostic way in which you can cut/paste VM resources between providers. When doing this, the backend configurations are handled for us to translate to the specific provider. Therefore, minimizing the level of effort to port a VM. This is extremely poweful, and will likely transpire into other resource portability such as firewalls, load balancers, etc.","title":"Resources"},{"location":"02_configuration/guide/","text":"Configuration Guide Configs Configurations should be defined in a configs.yml file. Secrets Backends The following backends are supported with limited functionality. Local(Default) Consul Backends are configured in our configs.yml file as below: backends: {} If our backends are configured exactly as above, we will use the default local backend. Local If you'd like a bit more control over the local backend. You can define the local backend as below: backends: local: path: terraform.tfstate Consul Currently Consul backend configurations supported are limited. But will be enhanced over time. You can configurare a Consul backend as below: backends: remote: consul: address: http://127.0.0.1:8500 scheme: http path: example/terraform Environments As mentioned before, Terraform Builder enforces multiple environments by default to ensure we have proper constructs in place from the beginning. The following environments are defaults: Development Production Staging We can configure environment specifics such as variables, etc. per environment. Variables that only apply to environments should be defined here. Use them as a way to define variables differently between environments if needed. Environment configurations should be configured similar to the below example: environments: development: variables: azurerm_admin_password: type: string description: Default admin password default: var.azurerm_admin_password azurerm_admin_public_key: type: string description: Default admin SSH public key default: var.azurerm_admin_public_key azurerm_admin_username: type: string description: Default admin username default: var.azurerm_admin_username azurerm_location: type: string description: Default AzureRM location/region default: West US vsphere_domain: type: string description: Domain to use for resources default: example.org production: variables: azurerm_admin_password: type: string description: Default admin password default: var.azurerm_admin_password azurerm_admin_public_key: type: string description: Default admin SSH public key default: var.azurerm_admin_public_key azurerm_admin_username: type: string description: Default admin username default: var.azurerm_admin_username azurerm_location: type: string description: Default AzureRM location/region default: East US vsphere_domain: type: string description: Domain to use for resources default: example.org staging: variables: azurerm_admin_password: type: string description: Default admin password default: var.azurerm_admin_password azurerm_admin_public_key: type: string description: Default admin SSH public key default: var.azurerm_admin_public_key azurerm_admin_username: type: string description: Default admin username default: var.azurerm_admin_username azurerm_location: type: string description: Default AzureRM location/region default: Central US vsphere_domain: type: string description: Domain to use for resources default: example.org Modules Modules allow us to construct our project into logical building blocks based on resources required to be used together. Structure will be project_name/modules/{module} root needs to always exist. Each module will be named with the respective environment appended to the beginning of the module name. Example: development-root , production-root , and staging-root . Variables that only apply to modules should be defined here. Provider connection variables are a good example. Module configurations should be configured similar to below: modules: root: variables: azurerm_client_id: type: string description: Default AzureRM client id azurerm_client_secret: type: string description: Default AzureRM client secret azurerm_environment: type: string description: AzureRM Environment default: public azurerm_subscription_id: type: string description: AzureRM Subscription ID azurerm_tenant_id: type: string description: AzureRM Tenant ID vsphere_allow_unverified_ssl: type: bool description: Boolean that can be set to true to disable SSL certificate verification default: \"false\" vsphere_host_password: type: string description: Password for vSphere hosts vsphere_host_username: type: string description: Username for vSphere hosts vsphere_password: type: string description: Password for vSphere API operations vsphere_server: type: string description: vCenter server name for vSphere API operations vsphere_username: type: string description: Username for vSphere API operations network: variables: {} services: variables: {} Supported Providers NOTE: The supported providers will be an iterative process. Initially the provider support will be very limited to ensure that the modeling is proven out. This will ensure that additional providers will follow the same modeling. Currently the following provider are supported with limited functionality. AzureRM DigitalOcean vSphere Below you find examples of each supported provider with configs. AzureRM NOTE: Need to add context for resource usage providers: AzureRM: resources: # Define image references images: ubuntu-16-04-x64: publisher: Canonical offer: UbuntuServer sku: 16.04-LTS version: latest os: linux ubuntu-18-04-x64: publisher: Canonical offer: UbuntuServer sku: 18.04-LTS version: latest os: linux # Define resource groups resource_groups: example-rg-root: create: true module: root # Define virtual networks virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 vms: example-vm-root: count: 1 image: ubuntu-18-04-x64 memory: 512 network: example-net public_ip: true num_cpus: 1 subnet: 10.0.2.0/24 tags: { \"environment\": \"${var.environment}\" } variables: azurerm_location: type: string description: Default AzureRM location/region default: \"\" azurerm_admin_password: type: string description: Default admin password azurerm_admin_public_key: type: string description: Default admin SSH public key azurerm_admin_username: type: string description: Default admin username DigitalOcean NOTE: Need to add context for resource usage providers: DigitalOcean: # Define resources, etc. only required in the project root. project_root: resources: domains: - example.org dns_records: - name: services type: CNAME domain: example.org value: production.services.example.org. resources: firewalls: # droplets will select firewall rules by name. Under modules, add any # modules which you'd like the firewall available within. This allows # us to define a single firewall, and make it available across modules. # Therefore, reducing the number of firewalls to configure. default: modules: - root name: default-server-rules rules: - protocol: tcp port_range: 22 source_addresses: [] direction: inbound - protocol: icmp destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound - protocol: tcp port_range: 1-65535 destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound - protocol: udp port_range: 1-65535 destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound tags: - default-firewall web: create: true modules: - root name: web-server-rules rules: - protocol: tcp port_range: 22 source_addresses: [] direction: inbound - protocol: tcp port_range: 80 source_addresses: [] direction: inbound - protocol: tcp port_range: 443 source_addresses: [] direction: inbound - protocol: icmp destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound - protocol: tcp port_range: 1-65535 destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound - protocol: udp port_range: 1-65535 destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound projects: example: create: true description: Example project module: root purpose: Just to demonstrate an example project # Define tags that need to be available across all modules. Then you can # define the applicable tags to the respective resources. An additional # tag will be created that will append each environment to the tag name. # Ex. example-digitalocean-development, example-digitalocean-production, # example-digitalocean-staging. Resources with tags defined will also be # add to the tag with the environment as well. tags: - default-firewall - example-digitalocean vms: # Define firewall to apply, if applicable. # Define project to add VM to, if applicable. # Define private networking if you'd like internal addressing. Setting # this to true, will also create an internal domain name if # modules[module]['do_domain'] is defined. example-vm: count: 1 # Example DNS record for each environment's internal URL. # Ensures that URL is contained internally only. dns_records: - name: portal type: A private: true firewall: default image: ubuntu-18-04-x64 memory: 1024 module: root num_cpus: 1 private_networking: true tags: - example-digitalocean variables: do_api_endpoint: type: string description: This can be used to override the base URL for DigitalOcean API requests default: https://api.digitalocean.com do_domain: type: string description: Default DigitalOcean domain for resources default: \"\" do_region: type: string description: DigitalOcean region default: \"\" do_ssh_keys: description: DigitalOcean SSH keys to deploy to new droplets default: [] do_token: type: string description: This is the DO API token default: \"\" vSphere NOTE: Need to add context for resource usage vSphere - Creating All Resources The following is an example of where we create all resource constructs in preparation of consuming them for VMs. providers: vSphere: resources: datacenters: example-dc: create: true clusters: example-cluster: create: true drs_enabled: true drs_automation_level: fullyAutomated ha_enabled: true hosts: example-esxi-01: create: true hostname: 10.10.10.1 vms: example-vm: count: 1 memory: 2048 network_interfaces: - network: example-pg address_allocation: dynamic num_cpus: 1 tags: - example-vsphere template: \"\" example-vm-from-template: count: 1 memory: 2048 # Need a way to decide how to select either data.vsphere_network # or other network_interfaces: - network: example-pg address_allocation: static num_cpus: 1 tags: - example-vsphere template: ubuntu1804_x64 example-win-vm-from-template: count: 1 memory: 2048 network_interfaces: - network: example-pg address_allocation: dynamic num_cpus: 1 tags: - example-vsphere template: windows2019_x64 module: root # Define existing networks to consume, not create # Add subnet info associated with network networks: example-pg: subnet: 192.168.250.0 cidr: 24 gateway: 192.168.250.1 # Define existing templates to consume, not create # Because Terraform 0.12.x does not support SATA we need to define # whether or not the controller is sata to add logic. Should this be # a boolean instead? # Define os as either linux or windows templates: ubuntu1604_x64: controller: scsi os: linux ubuntu1804_x64: controller: sata os: linux windows2019_x64: controller: sata os: windows # Define virtual switches to create # If false, they will just be skipped # Only works with hosts that are created # Still need to add subnet info associated with port_groups to allow # static IP assignments as we do with existing networks virtual_switches: example-switch: create: true type: host network_adapters: - vmnic0 - vmnic1 active_nics: - vmnic0 standby_nics: - vmnic1 teaming_policy: loadbalance_srcid # Define port groups to create # If false, they will just be skipped port_groups: example-pg: create: true tag_categories: example-category: create: true associable_types: - ClusterComputeResource - Datacenter - Datastore - HostSystem - VirtualMachine cardinality: SINGLE module: root tags: - example-vsphere variables: vsphere_domain: type: string description: Domain to use for resources default: \"\" vSphere - Consuming Resources The following is an example of where we consume all resource constructs in preparation of creating VMs. In this example, we are consuming existing Datacenters and clusters. providers: vSphere: resources: datacenters: example-dc: create: false clusters: example-cluster: create: false vms: example-vm: count: 1 memory: 2048 network_interfaces: - network: example-pg address_allocation: dynamic num_cpus: 1 tags: - example-vsphere template: \"\" example-vm-from-template: count: 1 memory: 2048 # Need a way to decide how to select either data.vsphere_network # or other network_interfaces: - network: example-pg address_allocation: static num_cpus: 1 tags: - example-vsphere template: ubuntu1804_x64 example-win-vm-from-template: count: 1 memory: 2048 network_interfaces: - network: example-pg address_allocation: dynamic num_cpus: 1 tags: - example-vsphere template: windows2019_x64 module: root # Define existing networks to consume, not create # Add subnet info associated with network networks: example-pg: subnet: 192.168.250.0 cidr: 24 gateway: 192.168.250.1 # Define existing templates to consume, not create # Because Terraform 0.12.x does not support SATA we need to define # whether or not the controller is sata to add logic. Should this be # a boolean instead? # Define os as either linux or windows templates: ubuntu1604_x64: controller: scsi os: linux ubuntu1804_x64: controller: sata os: linux windows2019_x64: controller: sata os: windows tag_categories: example-category: create: true associable_types: - ClusterComputeResource - Datacenter - Datastore - HostSystem - VirtualMachine cardinality: SINGLE module: root tags: - example-vsphere variables: vsphere_domain: type: string description: Domain to use for resources default: \"\"","title":"Configuration Guide"},{"location":"02_configuration/guide/#configuration-guide","text":"","title":"Configuration Guide"},{"location":"02_configuration/guide/#configs","text":"Configurations should be defined in a configs.yml file.","title":"Configs"},{"location":"02_configuration/guide/#secrets","text":"","title":"Secrets"},{"location":"02_configuration/guide/#backends","text":"The following backends are supported with limited functionality. Local(Default) Consul Backends are configured in our configs.yml file as below: backends: {} If our backends are configured exactly as above, we will use the default local backend.","title":"Backends"},{"location":"02_configuration/guide/#local","text":"If you'd like a bit more control over the local backend. You can define the local backend as below: backends: local: path: terraform.tfstate","title":"Local"},{"location":"02_configuration/guide/#consul","text":"Currently Consul backend configurations supported are limited. But will be enhanced over time. You can configurare a Consul backend as below: backends: remote: consul: address: http://127.0.0.1:8500 scheme: http path: example/terraform","title":"Consul"},{"location":"02_configuration/guide/#environments","text":"As mentioned before, Terraform Builder enforces multiple environments by default to ensure we have proper constructs in place from the beginning. The following environments are defaults: Development Production Staging We can configure environment specifics such as variables, etc. per environment. Variables that only apply to environments should be defined here. Use them as a way to define variables differently between environments if needed. Environment configurations should be configured similar to the below example: environments: development: variables: azurerm_admin_password: type: string description: Default admin password default: var.azurerm_admin_password azurerm_admin_public_key: type: string description: Default admin SSH public key default: var.azurerm_admin_public_key azurerm_admin_username: type: string description: Default admin username default: var.azurerm_admin_username azurerm_location: type: string description: Default AzureRM location/region default: West US vsphere_domain: type: string description: Domain to use for resources default: example.org production: variables: azurerm_admin_password: type: string description: Default admin password default: var.azurerm_admin_password azurerm_admin_public_key: type: string description: Default admin SSH public key default: var.azurerm_admin_public_key azurerm_admin_username: type: string description: Default admin username default: var.azurerm_admin_username azurerm_location: type: string description: Default AzureRM location/region default: East US vsphere_domain: type: string description: Domain to use for resources default: example.org staging: variables: azurerm_admin_password: type: string description: Default admin password default: var.azurerm_admin_password azurerm_admin_public_key: type: string description: Default admin SSH public key default: var.azurerm_admin_public_key azurerm_admin_username: type: string description: Default admin username default: var.azurerm_admin_username azurerm_location: type: string description: Default AzureRM location/region default: Central US vsphere_domain: type: string description: Domain to use for resources default: example.org","title":"Environments"},{"location":"02_configuration/guide/#modules","text":"Modules allow us to construct our project into logical building blocks based on resources required to be used together. Structure will be project_name/modules/{module} root needs to always exist. Each module will be named with the respective environment appended to the beginning of the module name. Example: development-root , production-root , and staging-root . Variables that only apply to modules should be defined here. Provider connection variables are a good example. Module configurations should be configured similar to below: modules: root: variables: azurerm_client_id: type: string description: Default AzureRM client id azurerm_client_secret: type: string description: Default AzureRM client secret azurerm_environment: type: string description: AzureRM Environment default: public azurerm_subscription_id: type: string description: AzureRM Subscription ID azurerm_tenant_id: type: string description: AzureRM Tenant ID vsphere_allow_unverified_ssl: type: bool description: Boolean that can be set to true to disable SSL certificate verification default: \"false\" vsphere_host_password: type: string description: Password for vSphere hosts vsphere_host_username: type: string description: Username for vSphere hosts vsphere_password: type: string description: Password for vSphere API operations vsphere_server: type: string description: vCenter server name for vSphere API operations vsphere_username: type: string description: Username for vSphere API operations network: variables: {} services: variables: {}","title":"Modules"},{"location":"02_configuration/guide/#supported-providers","text":"NOTE: The supported providers will be an iterative process. Initially the provider support will be very limited to ensure that the modeling is proven out. This will ensure that additional providers will follow the same modeling. Currently the following provider are supported with limited functionality. AzureRM DigitalOcean vSphere Below you find examples of each supported provider with configs.","title":"Supported Providers"},{"location":"02_configuration/guide/#azurerm","text":"NOTE: Need to add context for resource usage providers: AzureRM: resources: # Define image references images: ubuntu-16-04-x64: publisher: Canonical offer: UbuntuServer sku: 16.04-LTS version: latest os: linux ubuntu-18-04-x64: publisher: Canonical offer: UbuntuServer sku: 18.04-LTS version: latest os: linux # Define resource groups resource_groups: example-rg-root: create: true module: root # Define virtual networks virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 vms: example-vm-root: count: 1 image: ubuntu-18-04-x64 memory: 512 network: example-net public_ip: true num_cpus: 1 subnet: 10.0.2.0/24 tags: { \"environment\": \"${var.environment}\" } variables: azurerm_location: type: string description: Default AzureRM location/region default: \"\" azurerm_admin_password: type: string description: Default admin password azurerm_admin_public_key: type: string description: Default admin SSH public key azurerm_admin_username: type: string description: Default admin username","title":"AzureRM"},{"location":"02_configuration/guide/#digitalocean","text":"NOTE: Need to add context for resource usage providers: DigitalOcean: # Define resources, etc. only required in the project root. project_root: resources: domains: - example.org dns_records: - name: services type: CNAME domain: example.org value: production.services.example.org. resources: firewalls: # droplets will select firewall rules by name. Under modules, add any # modules which you'd like the firewall available within. This allows # us to define a single firewall, and make it available across modules. # Therefore, reducing the number of firewalls to configure. default: modules: - root name: default-server-rules rules: - protocol: tcp port_range: 22 source_addresses: [] direction: inbound - protocol: icmp destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound - protocol: tcp port_range: 1-65535 destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound - protocol: udp port_range: 1-65535 destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound tags: - default-firewall web: create: true modules: - root name: web-server-rules rules: - protocol: tcp port_range: 22 source_addresses: [] direction: inbound - protocol: tcp port_range: 80 source_addresses: [] direction: inbound - protocol: tcp port_range: 443 source_addresses: [] direction: inbound - protocol: icmp destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound - protocol: tcp port_range: 1-65535 destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound - protocol: udp port_range: 1-65535 destination_addresses: [\"0.0.0.0/0\", \"::/0\"] direction: outbound projects: example: create: true description: Example project module: root purpose: Just to demonstrate an example project # Define tags that need to be available across all modules. Then you can # define the applicable tags to the respective resources. An additional # tag will be created that will append each environment to the tag name. # Ex. example-digitalocean-development, example-digitalocean-production, # example-digitalocean-staging. Resources with tags defined will also be # add to the tag with the environment as well. tags: - default-firewall - example-digitalocean vms: # Define firewall to apply, if applicable. # Define project to add VM to, if applicable. # Define private networking if you'd like internal addressing. Setting # this to true, will also create an internal domain name if # modules[module]['do_domain'] is defined. example-vm: count: 1 # Example DNS record for each environment's internal URL. # Ensures that URL is contained internally only. dns_records: - name: portal type: A private: true firewall: default image: ubuntu-18-04-x64 memory: 1024 module: root num_cpus: 1 private_networking: true tags: - example-digitalocean variables: do_api_endpoint: type: string description: This can be used to override the base URL for DigitalOcean API requests default: https://api.digitalocean.com do_domain: type: string description: Default DigitalOcean domain for resources default: \"\" do_region: type: string description: DigitalOcean region default: \"\" do_ssh_keys: description: DigitalOcean SSH keys to deploy to new droplets default: [] do_token: type: string description: This is the DO API token default: \"\"","title":"DigitalOcean"},{"location":"02_configuration/guide/#vsphere","text":"NOTE: Need to add context for resource usage","title":"vSphere"},{"location":"02_configuration/guide/#vsphere-creating-all-resources","text":"The following is an example of where we create all resource constructs in preparation of consuming them for VMs. providers: vSphere: resources: datacenters: example-dc: create: true clusters: example-cluster: create: true drs_enabled: true drs_automation_level: fullyAutomated ha_enabled: true hosts: example-esxi-01: create: true hostname: 10.10.10.1 vms: example-vm: count: 1 memory: 2048 network_interfaces: - network: example-pg address_allocation: dynamic num_cpus: 1 tags: - example-vsphere template: \"\" example-vm-from-template: count: 1 memory: 2048 # Need a way to decide how to select either data.vsphere_network # or other network_interfaces: - network: example-pg address_allocation: static num_cpus: 1 tags: - example-vsphere template: ubuntu1804_x64 example-win-vm-from-template: count: 1 memory: 2048 network_interfaces: - network: example-pg address_allocation: dynamic num_cpus: 1 tags: - example-vsphere template: windows2019_x64 module: root # Define existing networks to consume, not create # Add subnet info associated with network networks: example-pg: subnet: 192.168.250.0 cidr: 24 gateway: 192.168.250.1 # Define existing templates to consume, not create # Because Terraform 0.12.x does not support SATA we need to define # whether or not the controller is sata to add logic. Should this be # a boolean instead? # Define os as either linux or windows templates: ubuntu1604_x64: controller: scsi os: linux ubuntu1804_x64: controller: sata os: linux windows2019_x64: controller: sata os: windows # Define virtual switches to create # If false, they will just be skipped # Only works with hosts that are created # Still need to add subnet info associated with port_groups to allow # static IP assignments as we do with existing networks virtual_switches: example-switch: create: true type: host network_adapters: - vmnic0 - vmnic1 active_nics: - vmnic0 standby_nics: - vmnic1 teaming_policy: loadbalance_srcid # Define port groups to create # If false, they will just be skipped port_groups: example-pg: create: true tag_categories: example-category: create: true associable_types: - ClusterComputeResource - Datacenter - Datastore - HostSystem - VirtualMachine cardinality: SINGLE module: root tags: - example-vsphere variables: vsphere_domain: type: string description: Domain to use for resources default: \"\"","title":"vSphere - Creating All Resources"},{"location":"02_configuration/guide/#vsphere-consuming-resources","text":"The following is an example of where we consume all resource constructs in preparation of creating VMs. In this example, we are consuming existing Datacenters and clusters. providers: vSphere: resources: datacenters: example-dc: create: false clusters: example-cluster: create: false vms: example-vm: count: 1 memory: 2048 network_interfaces: - network: example-pg address_allocation: dynamic num_cpus: 1 tags: - example-vsphere template: \"\" example-vm-from-template: count: 1 memory: 2048 # Need a way to decide how to select either data.vsphere_network # or other network_interfaces: - network: example-pg address_allocation: static num_cpus: 1 tags: - example-vsphere template: ubuntu1804_x64 example-win-vm-from-template: count: 1 memory: 2048 network_interfaces: - network: example-pg address_allocation: dynamic num_cpus: 1 tags: - example-vsphere template: windows2019_x64 module: root # Define existing networks to consume, not create # Add subnet info associated with network networks: example-pg: subnet: 192.168.250.0 cidr: 24 gateway: 192.168.250.1 # Define existing templates to consume, not create # Because Terraform 0.12.x does not support SATA we need to define # whether or not the controller is sata to add logic. Should this be # a boolean instead? # Define os as either linux or windows templates: ubuntu1604_x64: controller: scsi os: linux ubuntu1804_x64: controller: sata os: linux windows2019_x64: controller: sata os: windows tag_categories: example-category: create: true associable_types: - ClusterComputeResource - Datacenter - Datastore - HostSystem - VirtualMachine cardinality: SINGLE module: root tags: - example-vsphere variables: vsphere_domain: type: string description: Domain to use for resources default: \"\"","title":"vSphere - Consuming Resources"},{"location":"03_usage/","text":"Command Line Usage The following will provide some of the command line options available with Terraform Builder. Help You can get Terraform Builder help: python -m terraform_builder -h ... usage: __main__.py [-h] [--config CONFIG] [--outputdir OUTPUTDIR] [--secrets SECRETS] [--version] optional arguments: -h, --help show this help message and exit --config CONFIG Configuration (YAML) to load --outputdir OUTPUTDIR Define path to save configs. --secrets SECRETS Path to secrets --version show program's version number and exit Showing Version python -m terraform_builder --version ... terraform_builder 0.1.0 Execution To execute Terraform Builder simply provide the --config , --secrets , and --outputdir arguments. python -m terraform_builder --config examples/configs.yml --outputdir examples/example_builds ... Initializing modules... Initializing the backend... Initializing provider plugins... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.azurerm: version = \"~> 2.2\" * provider.digitalocean: version = \"~> 1.15\" * provider.vsphere: version = \"~> 1.17\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Success! The configuration is valid.","title":"Command Line Usage"},{"location":"03_usage/#command-line-usage","text":"The following will provide some of the command line options available with Terraform Builder.","title":"Command Line Usage"},{"location":"03_usage/#help","text":"You can get Terraform Builder help: python -m terraform_builder -h ... usage: __main__.py [-h] [--config CONFIG] [--outputdir OUTPUTDIR] [--secrets SECRETS] [--version] optional arguments: -h, --help show this help message and exit --config CONFIG Configuration (YAML) to load --outputdir OUTPUTDIR Define path to save configs. --secrets SECRETS Path to secrets --version show program's version number and exit","title":"Help"},{"location":"03_usage/#showing-version","text":"python -m terraform_builder --version ... terraform_builder 0.1.0","title":"Showing Version"},{"location":"03_usage/#execution","text":"To execute Terraform Builder simply provide the --config , --secrets , and --outputdir arguments. python -m terraform_builder --config examples/configs.yml --outputdir examples/example_builds ... Initializing modules... Initializing the backend... Initializing provider plugins... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.azurerm: version = \"~> 2.2\" * provider.digitalocean: version = \"~> 1.15\" * provider.vsphere: version = \"~> 1.17\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Success! The configuration is valid.","title":"Execution"},{"location":"example_builds/example/","text":"Terraform Project - example Welcome to your example project. The following details outline this project. NOTE: Ensure that you do not put any secret variables anywhere other than in secrets.yml and use the --secrets argument. The variables in this outline SHOULD only contain non-private information. Environments Environments represent such things as: development , staging , and production . development: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: West US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string production: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: East US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string staging: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: Central US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string Backends NOTE: From https://www.terraform.io/docs/backends/index.html A backend in Terraform determines how state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc. By default, Terraform uses the local backend, which is the normal behavior of Terraform you're used to. {} Providers NOTE: From https://www.terraform.io/docs/providers/index.html Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Almost any infrastructure type can be represented as a resource in Terraform. A provider is responsible for understanding API interactions and exposing resources. Providers generally are an IaaS (e.g. Alibaba Cloud, AWS, GCP, Microsoft Azure, OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Cloud, DNSimple, Cloudflare). Resources NOTE: From https://www.terraform.io/docs/configuration/resources.html Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records. AzureRM: resources: images: ubuntu-16-04-x64: offer: UbuntuServer os: linux publisher: Canonical sku: 16.04-LTS version: latest ubuntu-18-04-x64: offer: UbuntuServer os: linux publisher: Canonical sku: 18.04-LTS version: latest resource_groups: example-rg-root: create: true module: root virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 vms: example-vm-root: count: 1 image: ubuntu-18-04-x64 memory: 512 network: example-net num_cpus: 1 public_ip: true subnet: 10.0.2.0/24 tags: environment: ${var.environment} variables: azurerm_admin_password: description: Default admin password type: string azurerm_admin_public_key: description: Default admin SSH public key type: string azurerm_admin_username: description: Default admin username type: string azurerm_location: default: '' description: Default AzureRM location/region type: string DigitalOcean: project_root: resources: dns_records: - domain: example.org name: services type: CNAME value: production.services.example.org. domains: - example.org resources: firewalls: default: modules: - root name: default-server-rules rules: - direction: inbound port_range: 22 protocol: tcp source_addresses: [] - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound protocol: icmp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: tcp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: udp tags: - default-firewall web: create: true modules: - root name: web-server-rules rules: - direction: inbound port_range: 22 protocol: tcp source_addresses: [] - direction: inbound port_range: 80 protocol: tcp source_addresses: [] - direction: inbound port_range: 443 protocol: tcp source_addresses: [] - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound protocol: icmp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: tcp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: udp projects: example: create: true description: Example project module: root purpose: Just to demonstrate an example project tags: - default-firewall - example-digitalocean vms: example-vm: count: 1 dns_records: - name: portal private: true type: A firewall: default image: ubuntu-18-04-x64 memory: 1024 module: root num_cpus: 1 private_networking: true tags: - example-digitalocean variables: do_api_endpoint: default: https://api.digitalocean.com description: This can be used to override the base URL for DigitalOcean API requests type: string do_domain: default: '' description: Default DigitalOcean domain for resources type: string do_region: default: '' description: DigitalOcean region type: string do_ssh_keys: default: [] description: DigitalOcean SSH keys to deploy to new droplets do_token: default: '' description: This is the DO API token type: string vSphere: resources: datacenters: example-dc: clusters: example-cluster: create: true drs_automation_level: fullyAutomated drs_enabled: true ha_enabled: true hosts: example-esxi-01: create: true hostname: 10.10.10.1 vms: example-vm: count: 1 memory: 2048 network_interfaces: - address_allocation: dynamic network: example-pg num_cpus: 1 tags: - example-vsphere template: '' example-vm-from-template: count: 1 memory: 2048 network_interfaces: - address_allocation: static network: example-pg num_cpus: 1 tags: - example-vsphere template: ubuntu1804_x64 example-win-vm-from-template: count: 1 memory: 2048 network_interfaces: - address_allocation: dynamic network: example-pg num_cpus: 1 tags: - example-vsphere template: windows2019_x64 create: true module: root networks: example-pg: cidr: 24 gateway: 192.168.250.1 subnet: 192.168.250.0 templates: ubuntu1604_x64: controller: scsi os: linux ubuntu1804_x64: controller: sata os: linux windows2019_x64: controller: sata os: windows virtual_switches: example-switch: active_nics: - vmnic0 create: true network_adapters: - vmnic0 - vmnic1 port_groups: example-pg: create: true standby_nics: - vmnic1 teaming_policy: loadbalance_srcid type: host tag_categories: example-category: associable_types: - ClusterComputeResource - Datacenter - Datastore - HostSystem - VirtualMachine cardinality: SINGLE create: true module: root tags: - example-vsphere variables: vsphere_domain: default: '' description: Domain to use for resources type: string Modules NOTE: From https://www.terraform.io/docs/modules/index.html A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects. network: variables: {} root: variables: azurerm_client_id: description: Default AzureRM client id type: string azurerm_client_secret: description: Default AzureRM client secret type: string azurerm_environment: default: public description: AzureRM Environment type: string azurerm_subscription_id: description: AzureRM Subscription ID type: string azurerm_tenant_id: description: AzureRM Tenant ID type: string vsphere_allow_unverified_ssl: default: 'false' description: Boolean that can be set to true to disable SSL certificate verification type: bool vsphere_host_password: description: Password for vSphere hosts type: string vsphere_host_username: description: Username for vSphere hosts type: string vsphere_password: description: Password for vSphere API operations type: string vsphere_server: description: vCenter server name for vSphere API operations type: string vsphere_username: description: Username for vSphere API operations type: string services: variables: {} Project Structure example |-- LICENSE.md |-- README.md |-- environments | |-- development | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- production | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- staging | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- main.tf |-- modules | |-- root | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- network | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- services | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- requirements-dev.txt |-- requirements.txt |-- resources.tf |-- variables.tf Terraform Graph Below is a graph of your Terraform configuration. NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example"},{"location":"example_builds/example/#terraform-project-example","text":"Welcome to your example project. The following details outline this project. NOTE: Ensure that you do not put any secret variables anywhere other than in secrets.yml and use the --secrets argument. The variables in this outline SHOULD only contain non-private information.","title":"Terraform Project - example"},{"location":"example_builds/example/#environments","text":"Environments represent such things as: development , staging , and production . development: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: West US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string production: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: East US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string staging: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: Central US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string","title":"Environments"},{"location":"example_builds/example/#backends","text":"NOTE: From https://www.terraform.io/docs/backends/index.html A backend in Terraform determines how state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc. By default, Terraform uses the local backend, which is the normal behavior of Terraform you're used to. {}","title":"Backends"},{"location":"example_builds/example/#providers","text":"NOTE: From https://www.terraform.io/docs/providers/index.html Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Almost any infrastructure type can be represented as a resource in Terraform. A provider is responsible for understanding API interactions and exposing resources. Providers generally are an IaaS (e.g. Alibaba Cloud, AWS, GCP, Microsoft Azure, OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Cloud, DNSimple, Cloudflare).","title":"Providers"},{"location":"example_builds/example/#resources","text":"NOTE: From https://www.terraform.io/docs/configuration/resources.html Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records. AzureRM: resources: images: ubuntu-16-04-x64: offer: UbuntuServer os: linux publisher: Canonical sku: 16.04-LTS version: latest ubuntu-18-04-x64: offer: UbuntuServer os: linux publisher: Canonical sku: 18.04-LTS version: latest resource_groups: example-rg-root: create: true module: root virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 vms: example-vm-root: count: 1 image: ubuntu-18-04-x64 memory: 512 network: example-net num_cpus: 1 public_ip: true subnet: 10.0.2.0/24 tags: environment: ${var.environment} variables: azurerm_admin_password: description: Default admin password type: string azurerm_admin_public_key: description: Default admin SSH public key type: string azurerm_admin_username: description: Default admin username type: string azurerm_location: default: '' description: Default AzureRM location/region type: string DigitalOcean: project_root: resources: dns_records: - domain: example.org name: services type: CNAME value: production.services.example.org. domains: - example.org resources: firewalls: default: modules: - root name: default-server-rules rules: - direction: inbound port_range: 22 protocol: tcp source_addresses: [] - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound protocol: icmp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: tcp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: udp tags: - default-firewall web: create: true modules: - root name: web-server-rules rules: - direction: inbound port_range: 22 protocol: tcp source_addresses: [] - direction: inbound port_range: 80 protocol: tcp source_addresses: [] - direction: inbound port_range: 443 protocol: tcp source_addresses: [] - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound protocol: icmp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: tcp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: udp projects: example: create: true description: Example project module: root purpose: Just to demonstrate an example project tags: - default-firewall - example-digitalocean vms: example-vm: count: 1 dns_records: - name: portal private: true type: A firewall: default image: ubuntu-18-04-x64 memory: 1024 module: root num_cpus: 1 private_networking: true tags: - example-digitalocean variables: do_api_endpoint: default: https://api.digitalocean.com description: This can be used to override the base URL for DigitalOcean API requests type: string do_domain: default: '' description: Default DigitalOcean domain for resources type: string do_region: default: '' description: DigitalOcean region type: string do_ssh_keys: default: [] description: DigitalOcean SSH keys to deploy to new droplets do_token: default: '' description: This is the DO API token type: string vSphere: resources: datacenters: example-dc: clusters: example-cluster: create: true drs_automation_level: fullyAutomated drs_enabled: true ha_enabled: true hosts: example-esxi-01: create: true hostname: 10.10.10.1 vms: example-vm: count: 1 memory: 2048 network_interfaces: - address_allocation: dynamic network: example-pg num_cpus: 1 tags: - example-vsphere template: '' example-vm-from-template: count: 1 memory: 2048 network_interfaces: - address_allocation: static network: example-pg num_cpus: 1 tags: - example-vsphere template: ubuntu1804_x64 example-win-vm-from-template: count: 1 memory: 2048 network_interfaces: - address_allocation: dynamic network: example-pg num_cpus: 1 tags: - example-vsphere template: windows2019_x64 create: true module: root networks: example-pg: cidr: 24 gateway: 192.168.250.1 subnet: 192.168.250.0 templates: ubuntu1604_x64: controller: scsi os: linux ubuntu1804_x64: controller: sata os: linux windows2019_x64: controller: sata os: windows virtual_switches: example-switch: active_nics: - vmnic0 create: true network_adapters: - vmnic0 - vmnic1 port_groups: example-pg: create: true standby_nics: - vmnic1 teaming_policy: loadbalance_srcid type: host tag_categories: example-category: associable_types: - ClusterComputeResource - Datacenter - Datastore - HostSystem - VirtualMachine cardinality: SINGLE create: true module: root tags: - example-vsphere variables: vsphere_domain: default: '' description: Domain to use for resources type: string","title":"Resources"},{"location":"example_builds/example/#modules","text":"NOTE: From https://www.terraform.io/docs/modules/index.html A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects. network: variables: {} root: variables: azurerm_client_id: description: Default AzureRM client id type: string azurerm_client_secret: description: Default AzureRM client secret type: string azurerm_environment: default: public description: AzureRM Environment type: string azurerm_subscription_id: description: AzureRM Subscription ID type: string azurerm_tenant_id: description: AzureRM Tenant ID type: string vsphere_allow_unverified_ssl: default: 'false' description: Boolean that can be set to true to disable SSL certificate verification type: bool vsphere_host_password: description: Password for vSphere hosts type: string vsphere_host_username: description: Username for vSphere hosts type: string vsphere_password: description: Password for vSphere API operations type: string vsphere_server: description: vCenter server name for vSphere API operations type: string vsphere_username: description: Username for vSphere API operations type: string services: variables: {}","title":"Modules"},{"location":"example_builds/example/#project-structure","text":"example |-- LICENSE.md |-- README.md |-- environments | |-- development | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- production | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- staging | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- main.tf |-- modules | |-- root | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- network | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- services | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- requirements-dev.txt |-- requirements.txt |-- resources.tf |-- variables.tf","title":"Project Structure"},{"location":"example_builds/example/#terraform-graph","text":"Below is a graph of your Terraform configuration. NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Graph"},{"location":"example_builds/example/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/development/","text":"Terraform Project - example - Module development Module Info development: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: West US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module development"},{"location":"example_builds/example/environments/development/#terraform-project-example-module-development","text":"","title":"Terraform Project - example - Module development"},{"location":"example_builds/example/environments/development/#module-info","text":"development: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: West US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/development/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/production/","text":"Terraform Project - example - Module production Module Info production: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: East US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module production"},{"location":"example_builds/example/environments/production/#terraform-project-example-module-production","text":"","title":"Terraform Project - example - Module production"},{"location":"example_builds/example/environments/production/#module-info","text":"production: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: East US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/production/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/staging/","text":"Terraform Project - example - Module staging Module Info staging: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: Central US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module staging"},{"location":"example_builds/example/environments/staging/#terraform-project-example-module-staging","text":"","title":"Terraform Project - example - Module staging"},{"location":"example_builds/example/environments/staging/#module-info","text":"staging: variables: azurerm_admin_password: default: var.azurerm_admin_password description: Default admin password type: string azurerm_admin_public_key: default: var.azurerm_admin_public_key description: Default admin SSH public key type: string azurerm_admin_username: default: var.azurerm_admin_username description: Default admin username type: string azurerm_location: default: Central US description: Default AzureRM location/region type: string vsphere_domain: default: example.org description: Domain to use for resources type: string NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/staging/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/modules/network/","text":"Terraform Project - example - Module network Module Info network: variables: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module network"},{"location":"example_builds/example/modules/network/#terraform-project-example-module-network","text":"","title":"Terraform Project - example - Module network"},{"location":"example_builds/example/modules/network/#module-info","text":"network: variables: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/modules/network/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/modules/services/","text":"Terraform Project - example - Module services Module Info services: variables: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module services"},{"location":"example_builds/example/modules/services/#terraform-project-example-module-services","text":"","title":"Terraform Project - example - Module services"},{"location":"example_builds/example/modules/services/#module-info","text":"services: variables: {} NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/modules/services/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/root/","text":"Terraform Project - example - Module root Module Info root: variables: azurerm_client_id: description: Default AzureRM client id type: string azurerm_client_secret: description: Default AzureRM client secret type: string azurerm_environment: default: public description: AzureRM Environment type: string azurerm_subscription_id: description: AzureRM Subscription ID type: string azurerm_tenant_id: description: AzureRM Tenant ID type: string vsphere_allow_unverified_ssl: default: 'false' description: Boolean that can be set to true to disable SSL certificate verification type: bool vsphere_host_password: description: Password for vSphere hosts type: string vsphere_host_username: description: Username for vSphere hosts type: string vsphere_password: description: Password for vSphere API operations type: string vsphere_server: description: vCenter server name for vSphere API operations type: string vsphere_username: description: Username for vSphere API operations type: string NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module root"},{"location":"example_builds/example/root/#terraform-project-example-module-root","text":"","title":"Terraform Project - example - Module root"},{"location":"example_builds/example/root/#module-info","text":"root: variables: azurerm_client_id: description: Default AzureRM client id type: string azurerm_client_secret: description: Default AzureRM client secret type: string azurerm_environment: default: public description: AzureRM Environment type: string azurerm_subscription_id: description: AzureRM Subscription ID type: string azurerm_tenant_id: description: AzureRM Tenant ID type: string vsphere_allow_unverified_ssl: default: 'false' description: Boolean that can be set to true to disable SSL certificate verification type: bool vsphere_host_password: description: Password for vSphere hosts type: string vsphere_host_username: description: Username for vSphere hosts type: string vsphere_password: description: Password for vSphere API operations type: string vsphere_server: description: vCenter server name for vSphere API operations type: string vsphere_username: description: Username for vSphere API operations type: string NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/root/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"}]}