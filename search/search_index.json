{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Terraform Builder Welcome to Terraform Builder. Terraform builder is based on a similar concept of Packer Builder . NOTE: This is highly under development and far from fully featured.","title":"Terraform Builder"},{"location":"#terraform-builder","text":"Welcome to Terraform Builder. Terraform builder is based on a similar concept of Packer Builder . NOTE: This is highly under development and far from fully featured.","title":"Terraform Builder"},{"location":"about/","text":"About Terraform Builder Terraform Builder is completely open-source, and we welcome feedback, contributions, and recommendations. Start using Terraform Builder now, by heading over to https://github.com/mrlesmithjr/terraform-builder . Why Terraform Builder But, Terraform is simple already right? Of course it is! So, why do we need Terraform Builder? Simple! To make generating configurations more consumable. Terraform Builder also creates some of the documentation, etc. for your project by creating README.md files where appropriate and other important files such as .gitignore pre-populated for Terraform usage. Explore the example build to see the directory structure that is stamped out for you. Problems That Terraform Builder Solves Removing the complexities of Terraform HCL, etc. Moreover, standardizing Terraform configurations. By using Terraform Builder, it is easy to add or remove resources, etc. to ensure consistent functionality. Concepts One of the major concepts of Terraform Builder is, to keep configurations as agnostic as possible. For example, defining resources should be done in a way that is not provider specific. By simply setting a variable to the desired provider, the magic happens on the backend for the translation. With Terraform Builder, everything is a module. Therefore, all configurations are based off of this concept. This is not a new concept, as Terraform already assumes that even a single directory of configurations is a module. This module is the root module. So, with the root module being the foundation to all other modules. Any additional module is automatically linked to through the root module. The other concept enforced with Terraform Builder is environments. By default, environments are implemented as modules as well. These environments are: development , staging , and production . By automatically stitching these environments together with all other modules, removes the complexity of trying to do it manually. Does that mean that Terraform Builder is the right tool for everyone? Absolutely not! However, it does enable those who may be starting out new with Terraform to implement best practices as part of their learning. As well as, their implementations.","title":"About Terraform Builder"},{"location":"about/#about-terraform-builder","text":"Terraform Builder is completely open-source, and we welcome feedback, contributions, and recommendations. Start using Terraform Builder now, by heading over to https://github.com/mrlesmithjr/terraform-builder .","title":"About Terraform Builder"},{"location":"about/#why-terraform-builder","text":"But, Terraform is simple already right? Of course it is! So, why do we need Terraform Builder? Simple! To make generating configurations more consumable. Terraform Builder also creates some of the documentation, etc. for your project by creating README.md files where appropriate and other important files such as .gitignore pre-populated for Terraform usage. Explore the example build to see the directory structure that is stamped out for you.","title":"Why Terraform Builder"},{"location":"about/#problems-that-terraform-builder-solves","text":"Removing the complexities of Terraform HCL, etc. Moreover, standardizing Terraform configurations. By using Terraform Builder, it is easy to add or remove resources, etc. to ensure consistent functionality.","title":"Problems That Terraform Builder Solves"},{"location":"about/#concepts","text":"One of the major concepts of Terraform Builder is, to keep configurations as agnostic as possible. For example, defining resources should be done in a way that is not provider specific. By simply setting a variable to the desired provider, the magic happens on the backend for the translation. With Terraform Builder, everything is a module. Therefore, all configurations are based off of this concept. This is not a new concept, as Terraform already assumes that even a single directory of configurations is a module. This module is the root module. So, with the root module being the foundation to all other modules. Any additional module is automatically linked to through the root module. The other concept enforced with Terraform Builder is environments. By default, environments are implemented as modules as well. These environments are: development , staging , and production . By automatically stitching these environments together with all other modules, removes the complexity of trying to do it manually. Does that mean that Terraform Builder is the right tool for everyone? Absolutely not! However, it does enable those who may be starting out new with Terraform to implement best practices as part of their learning. As well as, their implementations.","title":"Concepts"},{"location":"usage/","text":"Terraform Builder Usage Requirements Clone Project To obtain the project simply clone it down: git clone https://github.com/mrlesmithjr/terraform-builder Python Packages Install required Python packages included in the project you cloned from above. pip3 install -r requirements.txt Terraform Version Manager Terraform version manager is a tool that I use personally. It assists in easily managing different Terraform versions for you to use. Rather than installing a version, and then having to do some random things to switch between versions. Definitely check it out here . Graphviz It is recommended that you install Graphviz to get a visible graph in your project README. Using Terraform Builder Is using Terraform Builder easy? Of course it is. But first we need to explore some of the concepts. Configurations Configurations are defined in YAML, and must follow a specific format. By doing this, we can ensure that we have consistency in our Terraform configurations. We use configs.yml but the filename can be anything you wish. However, the content must be consistent. Backends We can configure different Terraform backends to use for our Terraform state. Initially this functionality is limited to the default local and Consul . Consul support is limited and under development now. But you can use it for testing purposes until fully implemented. Local The default local is defined and should always be defined. But, if you don't. It will still default back to local without the added configs. # Define backends backends: local: path: terraform.tfstate remote: {} # consul: # address: http://127.0.0.1:8500 # scheme: http # path: example/terraform Consul To enable Consul as a backend, simply add the relevant info as below: NOTE: Leave local configured as a fallback. If Consul is configured, it will default to it rather than local . # Define backends backends: local: path: terraform.tfstate remote: consul: address: http://127.0.0.1:8500 scheme: http path: example/terraform Providers We can configure specific providers in our configs.yml . Resources Resources are where we can defined things such as VMs, resource groups, etc. For example, VMs are defined in an agnostic way in which you can cut/paste VM resources between providers. When doing this, the backend configurations are handled for us to translate to the specific provider. For some resources, we can define create: true or create: false . By doing this, we define the resource to be created or consume an existing resource. An example of this is for the AzureRM provider. In which we would like to define resource groups in a way similar to: providers: AzureRM: resources: resource_groups: default: create: false module: root example: create: true module: services If we were to use the above configuration, we would end up with configurations that look similar to: # Data AzureRM resource group data \"azurerm_resource_group\" \"default\" { name = \"default\" } # Resource AzureRM resource group resource \"azurerm_resource_group\" \"example\" { name = \"example\" location = var.azurerm_location } Example Configuration Below is an example of our configs.yml : NOTE: You can always find an updated example here --- # This is an example config layout # Defines project name which becomes parent root directory project_name: example # Define backends backends: local: {} remote: {} # Defines environments environments: development: {} production: {} staging: {} # Define global variables global_variables: {} # Define modules - Structure will be project_name/modules/{module} # root needs to always exist modules: root: {} network: {} services: {} # Define providers and variables providers: AzureRM: resources: networks: example: create: true module: services network: 10.0.0.0/16 resource_group: example subnets: - 10.0.1.0/24 - 10.0.2.0/24 resource_groups: default: create: false module: root example: create: true module: services vms: test-az-root: count: 2 image: ubuntu-18-04-x64 memory: 1024 module: services network: example subnet: 10.0.2.0/24 num_cpus: 1 tags: - test-azurerm - test-azurerm-root variables: azurerm_domain: type: string description: Default AzureRM domain for resources default: \"\" azurerm_environment: type: string description: AzureRM Environment default: public azurerm_features: description: Customize the behaviour of certain Azure Provider resources. default: {} azurerm_image_reference: description: Default OS image reference lookups default: { \"ubuntu-16-04-x64\": { \"publisher\": \"Canonical\", \"offer\": \"UbuntuServer\", \"sku\": \"16.04-LTS\", \"version\": \"latest\", }, \"ubuntu-18-04-x64\": { \"publisher\": \"Canonical\", \"offer\": \"UbuntuServer\", \"sku\": \"18.04-LTS\", \"version\": \"latest\", }, } azurerm_location: type: string description: Default AzureRM location/region default: East US azurerm_subscription_id: type: string description: AzureRM Subscription ID default: \"\" azurerm_tenant_id: type: string description: AzureRM Tenant ID default: \"\" DigitalOcean: resources: vms: test-do-root: count: 1 image: ubuntu-18-04-x64 memory: 1024 module: root num_cpus: 1 tags: - test-digitalocean - test-digitalocean-root test-do-network: count: 1 image: ubuntu-18-04-x64 memory: 1024 module: network num_cpus: 1 tags: - test-digitalocean - test-digitalocean-network variables: do_api_endpoint: type: string description: This can be used to override the base URL for DigitalOcean API requests default: https://api.digitalocean.com do_domain: type: string description: Default DigitalOcean domain for resources default: \"\" do_region: type: string description: DigitalOcean region default: nyc1 do_ssh_keys: type: string description: DigitalOcean SSH keys to deploy to new droplets default: [] do_token: type: string description: This is the DO API token default: \"\" vSphere: resources: vms: test-vs-root: count: 1 memory: 2048 module: root num_cpus: 1 tags: - test-vsphere - test-vsphere-root test-vs-services: count: 1 memory: 1024 module: services num_cpus: 2 tags: - test-vsphere - test-vsphere-services variables: vsphere_allow_unverified_ssl: type: bool description: Boolean that can be set to true to disable SSL certificate verification default: \"false\" vsphere_compute_cluster: type: string description: Compute cluster to use by default default: \"\" vsphere_datacenter: type: string description: Datacenter to use by default default: \"\" vsphere_network: type: string description: Network to use by default default: \"\" vsphere_password: type: string description: Password for vSphere API operations default: \"\" vsphere_resource_pool: type: string description: The resource pool to put virtual machine's in default: \"\" vsphere_server: type: string description: vCenter server name for vSphere API operations default: \"\" vsphere_username: type: string description: Username for vSphere API operations default: \"\" To properly secure secrets such as API tokens, usernames, passwords, etc. Ensure to define them in secrets.yml and not in configs.yml . Anything placed in secrets.yml will be created in the root module folder as terraform.tfvars.json . Example of secrets.yml : --- # Define secrets - Use with caution secrets: {} # azurerm_subscription_id: SuperSecretSubscriptionID # azurerm_tenant_id: SuperSecretTenantID # do_token: SuperSecretAPItoken # vsphere_password: SuperSecretPass # vsphere_username: SuperSecretUser Help You can get Terraform Builder help: python -m terraform_builder -h ... usage: __main__.py [-h] [--config CONFIG] [--outputdir OUTPUTDIR] [--secrets SECRETS] [--version] optional arguments: -h, --help show this help message and exit --config CONFIG Configuration (YAML) to load --outputdir OUTPUTDIR Define path to save configs. --secrets SECRETS Path to secrets --version show program's version number and exit Executing Executing Terraform Builder is extremely easy as well. Of course! You can play with the configs.yml` included in examples to get familiar with the concepts, etc. python -m terraform_builder --config examples/configs.yml --outputdir examples/example_builds ... Initializing modules... Initializing the backend... Initializing provider plugins... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.azurerm: version = \"~> 2.2\" * provider.digitalocean: version = \"~> 1.15\" * provider.vsphere: version = \"~> 1.16\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Success! The configuration is valid. As you can see from above, there is very minimal output. However, after the configurations have been generated, terraform init and terraform validate are invoked in the --outputdir . By doing this we can ensure that our configurations are good. You will also find a logs/terraform_builder.log , which has a good amount of info collected throughout the Terraform Builder process. Example of logs/terraform_builder.log : 2020-03-20 21:23:04,460 - terraform_builder.config - INFO - Loading config: examples/configs.yml 2020-03-20 21:23:04,479 - terraform_builder.config - INFO - Data found: {'project_name': 'example', 'backends': {'local': {}, 'remote': {}}, 'environments': {'development': {}, 'production': {}, 'staging': {}}, 'global_variables': {}, 'modules': {'root': {}, 'network': {}, 'services': {}}, 'providers': {'AzureRM': {'variables': {'azurerm_environment': {'type': 'string', 'description': 'AzureRM Environment', 'default': 'public'}, 'azurerm_features': {'description': 'Customize the behaviour of certain Azure Provider resources.', 'default': {}}, 'azurerm_subscription_id': {'type': 'string', 'description': 'AzureRM Subscription ID', 'default': ''}, 'azurerm_tenant_id': {'type': 'string', 'description': 'AzureRM Tenant ID', 'default': ''}}}, 'DigitalOcean': {'variables': {'do_api_endpoint': {'type': 'string', 'description': 'This can be used to override the base URL for DigitalOcean API requests', 'default': 'https://api.digitalocean.com'}, 'do_image': {'type': 'string', 'description': 'Default DigitalOcean droplet image', 'default': 'ubuntu-18-04-x64'}, 'do_region': {'type': 'string', 'description': 'DigitalOcean region', 'default': 'nyc1'}, 'do_ssh_keys': {'type': 'string', 'description': 'DigitalOcean SSH keys to deploy to new droplets', 'default': []}, 'do_token': {'type': 'string', 'description': 'This is the DO API token', 'default': ''}}}, 'vSphere': {'variables': {'vsphere_allow_unverified_ssl': {'type': 'bool', 'description': 'Boolean that can be set to true to disable SSL certificate verification', 'default': 'false'}, 'vsphere_compute_cluster': {'type': 'string', 'description': 'Compute cluster to use by default', 'default': ''}, 'vsphere_datacenter': {'type': 'string', 'description': 'Datacenter to use by default', 'default': ''}, 'vsphere_network': {'type': 'string', 'description': 'Network to use by default', 'default': ''}, 'vsphere_password': {'type': 'string', 'description': 'Password for vSphere API operations', 'default': ''}, 'vsphere_resource_pool': {'type': 'string', 'description': \"The resource pool to put virtual machine's in\", 'default': ''}, 'vsphere_server': {'type': 'string', 'description': 'vCenter server name for vSphere API operations', 'default': ''}, 'vsphere_username': {'type': 'string', 'description': 'Username for vSphere API operations', 'default': ''}}}}, 'resources': {'projects': {'TerraformCloud': {'description': 'Terraform Cloud Project', 'environment': 'development', 'module': 'root', 'provider': 'DigitalOcean', 'purpose': 'Terraform Cloud Project', 'resources': [], 'tags': ['test']}}, 'vms': {'test-do-root': {'count': 1, 'memory': 1024, 'module': 'root', 'num_cpus': 1, 'provider': 'DigitalOcean', 'tags': ['test-digitalocean', 'test-digitalocean-root']}, 'test-do-network': {'count': 1, 'memory': 1024, 'module': 'network', 'num_cpus': 1, 'provider': 'DigitalOcean', 'tags': ['test-digitalocean', 'test-vsphere-network']}, 'test-vs-root': {'count': 1, 'memory': 2048, 'module': 'root', 'num_cpus': 1, 'provider': 'vSphere', 'tags': ['test-vsphere', 'test-vsphere-root']}, 'test-vs-services': {'count': 1, 'memory': 1024, 'module': 'services', 'num_cpus': 2, 'provider': 'vSphere', 'tags': ['test-vsphere', 'test-vsphere-services']}}}} 2020-03-20 21:23:04,479 - terraform_builder.config - INFO - Loading secrets: /Users/larrysmithjr/Git_Projects/Personal/GitHub/mrlesmithjr/terraform-builder/examples/secrets.yml 2020-03-20 21:23:04,480 - terraform_builder.build - INFO - project_root: examples/example_builds/example 2020-03-20 21:23:04,480 - terraform_builder.build - INFO - Rendering template for module: root using: main.tf.j2 2020-03-20 21:23:04,495 - terraform_builder.build - INFO - Creating: examples/example_builds/example/main.tf 2020-03-20 21:23:04,495 - terraform_builder.build - INFO - Rendering template for module: root using: resources.tf.j2 2020-03-20 21:23:04,520 - terraform_builder.build - INFO - Creating: examples/example_builds/example/resources.tf 2020-03-20 21:23:04,520 - terraform_builder.build - INFO - Rendering template for module: root using: variables.tf.j2 2020-03-20 21:23:04,531 - terraform_builder.build - INFO - Creating: examples/example_builds/example/variables.tf 2020-03-20 21:23:04,532 - terraform_builder.build - INFO - Rendering template for module: development using: main.tf.j2 2020-03-20 21:23:04,543 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/development/main.tf 2020-03-20 21:23:04,543 - terraform_builder.build - INFO - Rendering template for module: development using: resources.tf.j2 2020-03-20 21:23:04,569 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/development/resources.tf 2020-03-20 21:23:04,569 - terraform_builder.build - INFO - Rendering template for module: development using: variables.tf.j2 2020-03-20 21:23:04,580 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/development/variables.tf 2020-03-20 21:23:04,581 - terraform_builder.build - INFO - Rendering template for module: production using: main.tf.j2 2020-03-20 21:23:04,593 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/production/main.tf 2020-03-20 21:23:04,593 - terraform_builder.build - INFO - Rendering template for module: production using: resources.tf.j2 2020-03-20 21:23:04,620 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/production/resources.tf 2020-03-20 21:23:04,620 - terraform_builder.build - INFO - Rendering template for module: production using: variables.tf.j2 2020-03-20 21:23:04,631 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/production/variables.tf 2020-03-20 21:23:04,632 - terraform_builder.build - INFO - Rendering template for module: staging using: main.tf.j2 2020-03-20 21:23:04,643 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/staging/main.tf 2020-03-20 21:23:04,643 - terraform_builder.build - INFO - Rendering template for module: staging using: resources.tf.j2 2020-03-20 21:23:04,668 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/staging/resources.tf 2020-03-20 21:23:04,668 - terraform_builder.build - INFO - Rendering template for module: staging using: variables.tf.j2 2020-03-20 21:23:04,681 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/staging/variables.tf 2020-03-20 21:23:04,682 - terraform_builder.build - INFO - Rendering template for module: network using: main.tf.j2 2020-03-20 21:23:04,694 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/network/main.tf 2020-03-20 21:23:04,694 - terraform_builder.build - INFO - Rendering template for module: network using: resources.tf.j2 2020-03-20 21:23:04,720 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/network/resources.tf 2020-03-20 21:23:04,720 - terraform_builder.build - INFO - Rendering template for module: network using: variables.tf.j2 2020-03-20 21:23:04,732 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/network/variables.tf 2020-03-20 21:23:04,733 - terraform_builder.build - INFO - Rendering template for module: services using: main.tf.j2 2020-03-20 21:23:04,747 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/services/main.tf 2020-03-20 21:23:04,748 - terraform_builder.build - INFO - Rendering template for module: services using: resources.tf.j2 2020-03-20 21:23:04,779 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/services/resources.tf 2020-03-20 21:23:04,779 - terraform_builder.build - INFO - Rendering template for module: services using: variables.tf.j2 2020-03-20 21:23:04,797 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/services/variables.tf 2020-03-20 21:23:04,797 - terraform_builder.specs.important.files - INFO - configs: {'project_name': 'example', 'backends': {'local': {}, 'remote': {}}, 'environments': {'development': {}, 'production': {}, 'staging': {}}, 'global_variables': {}, 'modules': {'root': {}, 'network': {}, 'services': {}}, 'providers': {'AzureRM': {'variables': {'azurerm_environment': {'type': 'string', 'description': 'AzureRM Environment', 'default': 'public'}, 'azurerm_features': {'description': 'Customize the behaviour of certain Azure Provider resources.', 'default': {}}, 'azurerm_subscription_id': {'type': 'string', 'description': 'AzureRM Subscription ID', 'default': ''}, 'azurerm_tenant_id': {'type': 'string', 'description': 'AzureRM Tenant ID', 'default': ''}}}, 'DigitalOcean': {'variables': {'do_api_endpoint': {'type': 'string', 'description': 'This can be used to override the base URL for DigitalOcean API requests', 'default': 'https://api.digitalocean.com'}, 'do_image': {'type': 'string', 'description': 'Default DigitalOcean droplet image', 'default': 'ubuntu-18-04-x64'}, 'do_region': {'type': 'string', 'description': 'DigitalOcean region', 'default': 'nyc1'}, 'do_ssh_keys': {'type': 'string', 'description': 'DigitalOcean SSH keys to deploy to new droplets', 'default': []}, 'do_token': {'type': 'string', 'description': 'This is the DO API token', 'default': ''}}}, 'vSphere': {'variables': {'vsphere_allow_unverified_ssl': {'type': 'bool', 'description': 'Boolean that can be set to true to disable SSL certificate verification', 'default': 'false'}, 'vsphere_compute_cluster': {'type': 'string', 'description': 'Compute cluster to use by default', 'default': ''}, 'vsphere_datacenter': {'type': 'string', 'description': 'Datacenter to use by default', 'default': ''}, 'vsphere_network': {'type': 'string', 'description': 'Network to use by default', 'default': ''}, 'vsphere_password': {'type': 'string', 'description': 'Password for vSphere API operations', 'default': ''}, 'vsphere_resource_pool': {'type': 'string', 'description': \"The resource pool to put virtual machine's in\", 'default': ''}, 'vsphere_server': {'type': 'string', 'description': 'vCenter server name for vSphere API operations', 'default': ''}, 'vsphere_username': {'type': 'string', 'description': 'Username for vSphere API operations', 'default': ''}}}}, 'resources': {'projects': {'TerraformCloud': {'description': 'Terraform Cloud Project', 'environment': 'development', 'module': 'root', 'provider': 'DigitalOcean', 'purpose': 'Terraform Cloud Project', 'resources': [], 'tags': ['test']}}, 'vms': {'test-do-root': {'count': 1, 'memory': 1024, 'module': 'root', 'num_cpus': 1, 'provider': 'DigitalOcean', 'tags': ['test-digitalocean', 'test-digitalocean-root']}, 'test-do-network': {'count': 1, 'memory': 1024, 'module': 'network', 'num_cpus': 1, 'provider': 'DigitalOcean', 'tags': ['test-digitalocean', 'test-vsphere-network']}, 'test-vs-root': {'count': 1, 'memory': 2048, 'module': 'root', 'num_cpus': 1, 'provider': 'vSphere', 'tags': ['test-vsphere', 'test-vsphere-root']}, 'test-vs-services': {'count': 1, 'memory': 1024, 'module': 'services', 'num_cpus': 2, 'provider': 'vSphere', 'tags': ['test-vsphere', 'test-vsphere-services']}}}} 2020-03-20 21:23:04,798 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/modules/network/LICENSE.md 2020-03-20 21:23:04,798 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/modules/services/LICENSE.md 2020-03-20 21:23:04,799 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/development/LICENSE.md 2020-03-20 21:23:04,799 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/production/LICENSE.md 2020-03-20 21:23:04,799 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/staging/LICENSE.md 2020-03-20 21:23:04,818 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/modules/network/README.md 2020-03-20 21:23:04,818 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/modules/services/README.md 2020-03-20 21:23:04,819 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/development/README.md 2020-03-20 21:23:04,820 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/production/README.md 2020-03-20 21:23:04,821 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/staging/README.md 2020-03-20 21:23:04,821 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/LICENSE.md 2020-03-20 21:23:04,839 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/README.md 2020-03-20 21:23:04,840 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/.gitignore 2020-03-20 21:23:04,841 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/requirements.txt 2020-03-20 21:23:04,843 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/requirements-dev.txt 2020-03-20 21:23:04,843 - terraform_builder.build - INFO - terraform_path: /usr/local/bin/terraform 2020-03-20 21:23:04,843 - terraform_builder.build - INFO - Initializing config in: examples/example_builds/example 2020-03-20 21:23:05,674 - terraform_builder.build - INFO - terraform init: \u001b[0m\u001b[1mInitializing modules...\u001b[0m \u001b[0m\u001b[1mInitializing the backend...\u001b[0m \u001b[0m\u001b[1mInitializing provider plugins...\u001b[0m The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.azurerm: version = \"~> 2.2\" * provider.digitalocean: version = \"~> 1.15\" * provider.vsphere: version = \"~> 1.16\" \u001b[0m\u001b[1m\u001b[32mTerraform has been successfully initialized!\u001b[0m\u001b[32m\u001b[0m \u001b[0m\u001b[32m You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary.\u001b[0m 2020-03-20 21:23:05,674 - terraform_builder.build - INFO - Validating config in: examples/example_builds/example 2020-03-20 21:23:07,153 - terraform_builder.build - INFO - terraform validate: \u001b[32m\u001b[1mSuccess!\u001b[0m The configuration is valid. \u001b[0m Demos Azure For this demo I'll be walking through building out some resources in Azure. I am using macOS therefore I need to install the Azure CLI tool. I'll also be creating a new project in my $HOME/Playground/Terraform_Project directory. Create project directory mkdir -p $HOME/Playground/Terraform_Project Install Azure CLI brew install azure-cli Clone Terraform Builder cd $HOME/Playground/ git clone https://github.com/mrlesmithjr/terraform-builder.git Azure Service Principal Next I'll need to create a Service Principal to authenticate with. Let's go ahead and login using the Azure CLI tool. az login You should have been redirected with your browser to authenticate at this point. And if you go back to your terminal you should see something similar to: [ { \"cloudName\": \"AzureCloud\", \"id\": \"00000000-0000-0000-0000-000000000000\", \"isDefault\": true, \"name\": \"PAYG Subscription\", \"state\": \"Enabled\", \"tenantId\": \"00000000-0000-0000-0000-000000000000\", \"user\": { \"name\": \"user@example.com\", \"type\": \"user\" } } ] We are now ready to create the Service Principal. Using the id to replace SUBSCRIPTION_ID below. az ad sp create-for-rbac --role=\"Contributor\" --scopes=\"/subscriptions/SUBSCRIPTION_ID\" You should get back something similar to below: { \"appId\": \"00000000-0000-0000-0000-000000000000\", \"displayName\": \"azure-cli-2017-06-05-10-41-15\", \"name\": \"http://azure-cli-2017-06-05-10-41-15\", \"password\": \"0000-0000-0000-0000-000000000000\", \"tenant\": \"00000000-0000-0000-0000-000000000000\" } Configs and Secrets Now you will need to configure your secrets.yml file to look like below using the SUBSCRIPTION_ID that you received after doing az login . The remaining three fields will be from the information you received after creating the Service Principal. $HOME/Playground/Terraform_Project/secrets.yml : --- # Define secrets - Use with caution secrets: azurerm_client_id: appID azurerm_client_secret: password azurerm_subscription_id: SUBSCRIPTION_ID azurerm_tenant_id: tenant Now we need to configure our configs.yml file to look similar to below: $HOME/Playground/Terraform_Project/configs.yml : --- # This is an example config layout # Defines project name which becomes parent root directory project_name: Terraform-Playground # Define backends backends: local: {} remote: {} # Defines environments environments: development: {} production: {} staging: {} # Define modules - Structure will be project_name/modules/{module} # root needs to always exist modules: root: {} # Define providers and variables providers: AzureRM: resources: resource_groups: example-rg-root: create: true module: root virtual_networks: {} # example-net: # address_space: # - 10.0.0.0/16 # create: true # subnets: # - 10.0.1.0/24 # - 10.0.2.0/24 vms: {} # example-vm-root: # count: 1 # image: ubuntu-18-04-x64 # memory: 1024 # network: example-net # subnet: 10.0.2.0/24 # num_cpus: 1 # tags: { \"environment\": \"${var.environment}\" } variables: azurerm_client_id: type: string description: Default AzureRM client id default: \"\" azurerm_client_secret: type: string description: Default AzureRM client secret default: \"\" azurerm_domain: type: string description: Default AzureRM domain for resources default: \"\" azurerm_environment: type: string description: AzureRM Environment default: public azurerm_features: description: Customize the behaviour of certain Azure Provider resources. default: {} azurerm_image_reference: description: Default OS image reference lookups default: { \"ubuntu-16-04-x64\": { \"publisher\": \"Canonical\", \"offer\": \"UbuntuServer\", \"sku\": \"16.04-LTS\", \"version\": \"latest\", }, \"ubuntu-18-04-x64\": { \"publisher\": \"Canonical\", \"offer\": \"UbuntuServer\", \"sku\": \"18.04-LTS\", \"version\": \"latest\", }, } azurerm_location: type: string description: Default AzureRM location/region default: East US azurerm_subscription_id: type: string description: AzureRM Subscription ID default: \"\" azurerm_tenant_id: type: string description: AzureRM Tenant ID default: \"\" Build Project After we've configured our secrets.yml and configs.yml files in our $HOME/Playground/Terraform_Project directory. We are now ready to build our Terraform project. cd $HOME/Playground/terraform-builder We now need to install a few Python packages which are required and we will do so in a Python virtual environment. First, create Python virtual environment: python3 -m venv venv Next activate the Python virtual environment: source venv/bin/activate Now let's install the required Python packages: pip3 install -r requirements.txt Once this has completed we are ready to build our project. python -m terraform_builder --config $HOME/Playground/Terraform_Project/configs.yml --secrets $HOME/Playground/Terraform_Project/secrets.yml --outputdir $HOME/Playground/Terraform_Project ... Initializing modules... Initializing the backend... Initializing provider plugins... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.azurerm: version = \"~> 2.2\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Success! The configuration is valid. (venv) Success! Now we are ready to start using Terraform in our project directory. cd $HOME/Playground/Terraform_Project/Terraform-Playground Let's do a quick terraform plan and see what all is going to be done. terraform plan ... Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_resource_group.example_rg_root will be created + resource \"azurerm_resource_group\" \"example_rg_root\" { + id = (known after apply) + location = \"eastus\" + name = \"example-rg-root\" } Plan: 1 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Note: You didn't specify an \"-out\" parameter to save this plan, so Terraform can't guarantee that exactly these actions will be performed if \"terraform apply\" is subsequently run. So far so good. Let's go ahead and do a terraform apply now: terraform apply ... An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_resource_group.example_rg_root will be created + resource \"azurerm_resource_group\" \"example_rg_root\" { + id = (known after apply) + location = \"eastus\" + name = \"example-rg-root\" } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes azurerm_resource_group.example_rg_root: Creating... azurerm_resource_group.example_rg_root: Creation complete after 1s [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. The state of your infrastructure has been saved to the path below. This state is required to modify and destroy your infrastructure, so keep it safe. To inspect the complete state use the `terraform show` command. State path: terraform.tfstate Boom. We've successfully created our very first resource group in Azure using Terraform Builder. The awesome part was we did not need to dig into the Terraform configurations at all to get everything configured. Now let's go ahead and create our virtual network. Open up configs.yml and uncomment the virtual_networks section so our providers AzureRM configuration now looks like: providers: AzureRM: resources: resource_groups: example-rg-root: create: true module: root virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 After uncommenting the virtual_networks , run Terraform Builder again: python -m terraform_builder --config $HOME/Playground/Terraform_Project/configs.yml --secrets $HOME/Playground/Terraform_Project/secrets.yml --outputdir $HOME/Playground/Terraform_Project And now run terraform plan again and we should see the following: terraform plan ... Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. azurerm_resource_group.example_rg_root: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root] ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_subnet.example_net_subnet_0 will be created + resource \"azurerm_subnet\" \"example_net_subnet_0\" { + address_prefix = \"10.0.1.0/24\" + enforce_private_link_endpoint_network_policies = false + enforce_private_link_service_network_policies = false + id = (known after apply) + name = \"example-net_subnet_0\" + resource_group_name = \"example-rg-root\" + virtual_network_name = \"example-net\" } # azurerm_subnet.example_net_subnet_1 will be created + resource \"azurerm_subnet\" \"example_net_subnet_1\" { + address_prefix = \"10.0.2.0/24\" + enforce_private_link_endpoint_network_policies = false + enforce_private_link_service_network_policies = false + id = (known after apply) + name = \"example-net_subnet_1\" + resource_group_name = \"example-rg-root\" + virtual_network_name = \"example-net\" } # azurerm_virtual_network.example_net will be created + resource \"azurerm_virtual_network\" \"example_net\" { + address_space = [ + \"10.0.0.0/16\", ] + id = (known after apply) + location = \"eastus\" + name = \"example-net\" + resource_group_name = \"example-rg-root\" + subnet { + address_prefix = (known after apply) + id = (known after apply) + name = (known after apply) + security_group = (known after apply) } } Plan: 3 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Note: You didn't specify an \"-out\" parameter to save this plan, so Terraform can't guarantee that exactly these actions will be performed if \"terraform apply\" is subsequently run. Looks good. So, let's apply this configuration now. terraform apply ... azurerm_resource_group.example_rg_root: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_subnet.example_net_subnet_0 will be created + resource \"azurerm_subnet\" \"example_net_subnet_0\" { + address_prefix = \"10.0.1.0/24\" + enforce_private_link_endpoint_network_policies = false + enforce_private_link_service_network_policies = false + id = (known after apply) + name = \"example-net_subnet_0\" + resource_group_name = \"example-rg-root\" + virtual_network_name = \"example-net\" } # azurerm_subnet.example_net_subnet_1 will be created + resource \"azurerm_subnet\" \"example_net_subnet_1\" { + address_prefix = \"10.0.2.0/24\" + enforce_private_link_endpoint_network_policies = false + enforce_private_link_service_network_policies = false + id = (known after apply) + name = \"example-net_subnet_1\" + resource_group_name = \"example-rg-root\" + virtual_network_name = \"example-net\" } # azurerm_virtual_network.example_net will be created + resource \"azurerm_virtual_network\" \"example_net\" { + address_space = [ + \"10.0.0.0/16\", ] + id = (known after apply) + location = \"eastus\" + name = \"example-net\" + resource_group_name = \"example-rg-root\" + subnet { + address_prefix = (known after apply) + id = (known after apply) + name = (known after apply) + security_group = (known after apply) } } Plan: 3 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes azurerm_virtual_network.example_net: Creating... azurerm_virtual_network.example_net: Still creating... [10s elapsed] azurerm_virtual_network.example_net: Creation complete after 13s [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net] azurerm_subnet.example_net_subnet_1: Creating... azurerm_subnet.example_net_subnet_0: Creating... azurerm_subnet.example_net_subnet_0: Creation complete after 1s [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_0] azurerm_subnet.example_net_subnet_1: Creation complete after 2s [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_1] Apply complete! Resources: 3 added, 0 changed, 0 destroyed. The state of your infrastructure has been saved to the path below. This state is required to modify and destroy your infrastructure, so keep it safe. To inspect the complete state use the `terraform show` command. State path: terraform.tfstate BOOOOOM!! Now let's create a VM. So, uncomment the vms section in configs.yml for the AzureRM provider. After doing so, our provider configuration should look like: providers: AzureRM: resources: resource_groups: example-rg-root: create: true module: root virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 vms: example-vm-root: count: 1 image: ubuntu-18-04-x64 memory: 1024 network: example-net subnet: 10.0.2.0/24 num_cpus: 1 tags: { \"environment\": \"${var.environment}\" } After uncommenting the vms , run Terraform Builder again: python -m terraform_builder --config $HOME/Playground/Terraform_Project/configs.yml --secrets $HOME/Playground/Terraform_Project/secrets.yml --outputdir $HOME/Playground/Terraform_Project And now run terraform plan again and we should see the following: terraform plan ... Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. azurerm_resource_group.example_rg_root: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root] azurerm_virtual_network.example_net: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net] azurerm_subnet.example_net_subnet_1: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_1] azurerm_subnet.example_net_subnet_0: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_0] ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_network_interface.example_vm_root[0] will be created + resource \"azurerm_network_interface\" \"example_vm_root\" { + applied_dns_servers = (known after apply) + dns_servers = (known after apply) + enable_accelerated_networking = false + enable_ip_forwarding = false + id = (known after apply) + internal_dns_name_label = (known after apply) + location = \"eastus\" + mac_address = (known after apply) + name = \"example-vm-root-01-nic\" + private_ip_address = (known after apply) + private_ip_addresses = (known after apply) + resource_group_name = \"example-rg-root\" + virtual_machine_id = (known after apply) + ip_configuration { + name = \"example-vm-root-01-ip-config\" + primary = (known after apply) + private_ip_address = (known after apply) + private_ip_address_allocation = \"dynamic\" + private_ip_address_version = \"IPv4\" + subnet_id = \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_1\" } } # azurerm_virtual_machine.example_vm_root[0] will be created + resource \"azurerm_virtual_machine\" \"example_vm_root\" { + availability_set_id = (known after apply) + delete_data_disks_on_termination = false + delete_os_disk_on_termination = false + id = (known after apply) + license_type = (known after apply) + location = \"eastus\" + name = \"example-vm-root-01-\" + network_interface_ids = (known after apply) + resource_group_name = \"example-rg-root\" + tags = { + \"environment\" = \"\" } + vm_size = \"Standard_DS1_v2\" + identity { + identity_ids = (known after apply) + principal_id = (known after apply) + type = (known after apply) } + storage_data_disk { + caching = (known after apply) + create_option = (known after apply) + disk_size_gb = (known after apply) + lun = (known after apply) + managed_disk_id = (known after apply) + managed_disk_type = (known after apply) + name = (known after apply) + vhd_uri = (known after apply) + write_accelerator_enabled = (known after apply) } + storage_image_reference { + offer = \"UbuntuServer\" + publisher = \"Canonical\" + sku = \"18.04-LTS\" + version = \"latest\" } + storage_os_disk { + caching = \"ReadWrite\" + create_option = \"FromImage\" + disk_size_gb = (known after apply) + managed_disk_id = (known after apply) + managed_disk_type = \"Standard_LRS\" + name = \"example-vm-root-01-\" + os_type = (known after apply) + write_accelerator_enabled = false } } Plan: 2 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Note: You didn't specify an \"-out\" parameter to save this plan, so Terraform can't guarantee that exactly these actions will be performed if \"terraform apply\" is subsequently run. Now let's run terraform apply once again! terraform apply And once this has completed you SHOULD have your VMs up and running.","title":"Terraform Builder Usage"},{"location":"usage/#terraform-builder-usage","text":"","title":"Terraform Builder Usage"},{"location":"usage/#requirements","text":"","title":"Requirements"},{"location":"usage/#clone-project","text":"To obtain the project simply clone it down: git clone https://github.com/mrlesmithjr/terraform-builder","title":"Clone Project"},{"location":"usage/#python-packages","text":"Install required Python packages included in the project you cloned from above. pip3 install -r requirements.txt","title":"Python Packages"},{"location":"usage/#terraform-version-manager","text":"Terraform version manager is a tool that I use personally. It assists in easily managing different Terraform versions for you to use. Rather than installing a version, and then having to do some random things to switch between versions. Definitely check it out here .","title":"Terraform Version Manager"},{"location":"usage/#graphviz","text":"It is recommended that you install Graphviz to get a visible graph in your project README.","title":"Graphviz"},{"location":"usage/#using-terraform-builder","text":"Is using Terraform Builder easy? Of course it is. But first we need to explore some of the concepts.","title":"Using Terraform Builder"},{"location":"usage/#configurations","text":"Configurations are defined in YAML, and must follow a specific format. By doing this, we can ensure that we have consistency in our Terraform configurations. We use configs.yml but the filename can be anything you wish. However, the content must be consistent.","title":"Configurations"},{"location":"usage/#backends","text":"We can configure different Terraform backends to use for our Terraform state. Initially this functionality is limited to the default local and Consul . Consul support is limited and under development now. But you can use it for testing purposes until fully implemented.","title":"Backends"},{"location":"usage/#local","text":"The default local is defined and should always be defined. But, if you don't. It will still default back to local without the added configs. # Define backends backends: local: path: terraform.tfstate remote: {} # consul: # address: http://127.0.0.1:8500 # scheme: http # path: example/terraform","title":"Local"},{"location":"usage/#consul","text":"To enable Consul as a backend, simply add the relevant info as below: NOTE: Leave local configured as a fallback. If Consul is configured, it will default to it rather than local . # Define backends backends: local: path: terraform.tfstate remote: consul: address: http://127.0.0.1:8500 scheme: http path: example/terraform","title":"Consul"},{"location":"usage/#providers","text":"We can configure specific providers in our configs.yml .","title":"Providers"},{"location":"usage/#resources","text":"Resources are where we can defined things such as VMs, resource groups, etc. For example, VMs are defined in an agnostic way in which you can cut/paste VM resources between providers. When doing this, the backend configurations are handled for us to translate to the specific provider. For some resources, we can define create: true or create: false . By doing this, we define the resource to be created or consume an existing resource. An example of this is for the AzureRM provider. In which we would like to define resource groups in a way similar to: providers: AzureRM: resources: resource_groups: default: create: false module: root example: create: true module: services If we were to use the above configuration, we would end up with configurations that look similar to: # Data AzureRM resource group data \"azurerm_resource_group\" \"default\" { name = \"default\" } # Resource AzureRM resource group resource \"azurerm_resource_group\" \"example\" { name = \"example\" location = var.azurerm_location }","title":"Resources"},{"location":"usage/#example-configuration","text":"Below is an example of our configs.yml : NOTE: You can always find an updated example here --- # This is an example config layout # Defines project name which becomes parent root directory project_name: example # Define backends backends: local: {} remote: {} # Defines environments environments: development: {} production: {} staging: {} # Define global variables global_variables: {} # Define modules - Structure will be project_name/modules/{module} # root needs to always exist modules: root: {} network: {} services: {} # Define providers and variables providers: AzureRM: resources: networks: example: create: true module: services network: 10.0.0.0/16 resource_group: example subnets: - 10.0.1.0/24 - 10.0.2.0/24 resource_groups: default: create: false module: root example: create: true module: services vms: test-az-root: count: 2 image: ubuntu-18-04-x64 memory: 1024 module: services network: example subnet: 10.0.2.0/24 num_cpus: 1 tags: - test-azurerm - test-azurerm-root variables: azurerm_domain: type: string description: Default AzureRM domain for resources default: \"\" azurerm_environment: type: string description: AzureRM Environment default: public azurerm_features: description: Customize the behaviour of certain Azure Provider resources. default: {} azurerm_image_reference: description: Default OS image reference lookups default: { \"ubuntu-16-04-x64\": { \"publisher\": \"Canonical\", \"offer\": \"UbuntuServer\", \"sku\": \"16.04-LTS\", \"version\": \"latest\", }, \"ubuntu-18-04-x64\": { \"publisher\": \"Canonical\", \"offer\": \"UbuntuServer\", \"sku\": \"18.04-LTS\", \"version\": \"latest\", }, } azurerm_location: type: string description: Default AzureRM location/region default: East US azurerm_subscription_id: type: string description: AzureRM Subscription ID default: \"\" azurerm_tenant_id: type: string description: AzureRM Tenant ID default: \"\" DigitalOcean: resources: vms: test-do-root: count: 1 image: ubuntu-18-04-x64 memory: 1024 module: root num_cpus: 1 tags: - test-digitalocean - test-digitalocean-root test-do-network: count: 1 image: ubuntu-18-04-x64 memory: 1024 module: network num_cpus: 1 tags: - test-digitalocean - test-digitalocean-network variables: do_api_endpoint: type: string description: This can be used to override the base URL for DigitalOcean API requests default: https://api.digitalocean.com do_domain: type: string description: Default DigitalOcean domain for resources default: \"\" do_region: type: string description: DigitalOcean region default: nyc1 do_ssh_keys: type: string description: DigitalOcean SSH keys to deploy to new droplets default: [] do_token: type: string description: This is the DO API token default: \"\" vSphere: resources: vms: test-vs-root: count: 1 memory: 2048 module: root num_cpus: 1 tags: - test-vsphere - test-vsphere-root test-vs-services: count: 1 memory: 1024 module: services num_cpus: 2 tags: - test-vsphere - test-vsphere-services variables: vsphere_allow_unverified_ssl: type: bool description: Boolean that can be set to true to disable SSL certificate verification default: \"false\" vsphere_compute_cluster: type: string description: Compute cluster to use by default default: \"\" vsphere_datacenter: type: string description: Datacenter to use by default default: \"\" vsphere_network: type: string description: Network to use by default default: \"\" vsphere_password: type: string description: Password for vSphere API operations default: \"\" vsphere_resource_pool: type: string description: The resource pool to put virtual machine's in default: \"\" vsphere_server: type: string description: vCenter server name for vSphere API operations default: \"\" vsphere_username: type: string description: Username for vSphere API operations default: \"\" To properly secure secrets such as API tokens, usernames, passwords, etc. Ensure to define them in secrets.yml and not in configs.yml . Anything placed in secrets.yml will be created in the root module folder as terraform.tfvars.json . Example of secrets.yml : --- # Define secrets - Use with caution secrets: {} # azurerm_subscription_id: SuperSecretSubscriptionID # azurerm_tenant_id: SuperSecretTenantID # do_token: SuperSecretAPItoken # vsphere_password: SuperSecretPass # vsphere_username: SuperSecretUser","title":"Example Configuration"},{"location":"usage/#help","text":"You can get Terraform Builder help: python -m terraform_builder -h ... usage: __main__.py [-h] [--config CONFIG] [--outputdir OUTPUTDIR] [--secrets SECRETS] [--version] optional arguments: -h, --help show this help message and exit --config CONFIG Configuration (YAML) to load --outputdir OUTPUTDIR Define path to save configs. --secrets SECRETS Path to secrets --version show program's version number and exit","title":"Help"},{"location":"usage/#executing","text":"Executing Terraform Builder is extremely easy as well. Of course! You can play with the configs.yml` included in examples to get familiar with the concepts, etc. python -m terraform_builder --config examples/configs.yml --outputdir examples/example_builds ... Initializing modules... Initializing the backend... Initializing provider plugins... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.azurerm: version = \"~> 2.2\" * provider.digitalocean: version = \"~> 1.15\" * provider.vsphere: version = \"~> 1.16\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Success! The configuration is valid. As you can see from above, there is very minimal output. However, after the configurations have been generated, terraform init and terraform validate are invoked in the --outputdir . By doing this we can ensure that our configurations are good. You will also find a logs/terraform_builder.log , which has a good amount of info collected throughout the Terraform Builder process. Example of logs/terraform_builder.log : 2020-03-20 21:23:04,460 - terraform_builder.config - INFO - Loading config: examples/configs.yml 2020-03-20 21:23:04,479 - terraform_builder.config - INFO - Data found: {'project_name': 'example', 'backends': {'local': {}, 'remote': {}}, 'environments': {'development': {}, 'production': {}, 'staging': {}}, 'global_variables': {}, 'modules': {'root': {}, 'network': {}, 'services': {}}, 'providers': {'AzureRM': {'variables': {'azurerm_environment': {'type': 'string', 'description': 'AzureRM Environment', 'default': 'public'}, 'azurerm_features': {'description': 'Customize the behaviour of certain Azure Provider resources.', 'default': {}}, 'azurerm_subscription_id': {'type': 'string', 'description': 'AzureRM Subscription ID', 'default': ''}, 'azurerm_tenant_id': {'type': 'string', 'description': 'AzureRM Tenant ID', 'default': ''}}}, 'DigitalOcean': {'variables': {'do_api_endpoint': {'type': 'string', 'description': 'This can be used to override the base URL for DigitalOcean API requests', 'default': 'https://api.digitalocean.com'}, 'do_image': {'type': 'string', 'description': 'Default DigitalOcean droplet image', 'default': 'ubuntu-18-04-x64'}, 'do_region': {'type': 'string', 'description': 'DigitalOcean region', 'default': 'nyc1'}, 'do_ssh_keys': {'type': 'string', 'description': 'DigitalOcean SSH keys to deploy to new droplets', 'default': []}, 'do_token': {'type': 'string', 'description': 'This is the DO API token', 'default': ''}}}, 'vSphere': {'variables': {'vsphere_allow_unverified_ssl': {'type': 'bool', 'description': 'Boolean that can be set to true to disable SSL certificate verification', 'default': 'false'}, 'vsphere_compute_cluster': {'type': 'string', 'description': 'Compute cluster to use by default', 'default': ''}, 'vsphere_datacenter': {'type': 'string', 'description': 'Datacenter to use by default', 'default': ''}, 'vsphere_network': {'type': 'string', 'description': 'Network to use by default', 'default': ''}, 'vsphere_password': {'type': 'string', 'description': 'Password for vSphere API operations', 'default': ''}, 'vsphere_resource_pool': {'type': 'string', 'description': \"The resource pool to put virtual machine's in\", 'default': ''}, 'vsphere_server': {'type': 'string', 'description': 'vCenter server name for vSphere API operations', 'default': ''}, 'vsphere_username': {'type': 'string', 'description': 'Username for vSphere API operations', 'default': ''}}}}, 'resources': {'projects': {'TerraformCloud': {'description': 'Terraform Cloud Project', 'environment': 'development', 'module': 'root', 'provider': 'DigitalOcean', 'purpose': 'Terraform Cloud Project', 'resources': [], 'tags': ['test']}}, 'vms': {'test-do-root': {'count': 1, 'memory': 1024, 'module': 'root', 'num_cpus': 1, 'provider': 'DigitalOcean', 'tags': ['test-digitalocean', 'test-digitalocean-root']}, 'test-do-network': {'count': 1, 'memory': 1024, 'module': 'network', 'num_cpus': 1, 'provider': 'DigitalOcean', 'tags': ['test-digitalocean', 'test-vsphere-network']}, 'test-vs-root': {'count': 1, 'memory': 2048, 'module': 'root', 'num_cpus': 1, 'provider': 'vSphere', 'tags': ['test-vsphere', 'test-vsphere-root']}, 'test-vs-services': {'count': 1, 'memory': 1024, 'module': 'services', 'num_cpus': 2, 'provider': 'vSphere', 'tags': ['test-vsphere', 'test-vsphere-services']}}}} 2020-03-20 21:23:04,479 - terraform_builder.config - INFO - Loading secrets: /Users/larrysmithjr/Git_Projects/Personal/GitHub/mrlesmithjr/terraform-builder/examples/secrets.yml 2020-03-20 21:23:04,480 - terraform_builder.build - INFO - project_root: examples/example_builds/example 2020-03-20 21:23:04,480 - terraform_builder.build - INFO - Rendering template for module: root using: main.tf.j2 2020-03-20 21:23:04,495 - terraform_builder.build - INFO - Creating: examples/example_builds/example/main.tf 2020-03-20 21:23:04,495 - terraform_builder.build - INFO - Rendering template for module: root using: resources.tf.j2 2020-03-20 21:23:04,520 - terraform_builder.build - INFO - Creating: examples/example_builds/example/resources.tf 2020-03-20 21:23:04,520 - terraform_builder.build - INFO - Rendering template for module: root using: variables.tf.j2 2020-03-20 21:23:04,531 - terraform_builder.build - INFO - Creating: examples/example_builds/example/variables.tf 2020-03-20 21:23:04,532 - terraform_builder.build - INFO - Rendering template for module: development using: main.tf.j2 2020-03-20 21:23:04,543 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/development/main.tf 2020-03-20 21:23:04,543 - terraform_builder.build - INFO - Rendering template for module: development using: resources.tf.j2 2020-03-20 21:23:04,569 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/development/resources.tf 2020-03-20 21:23:04,569 - terraform_builder.build - INFO - Rendering template for module: development using: variables.tf.j2 2020-03-20 21:23:04,580 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/development/variables.tf 2020-03-20 21:23:04,581 - terraform_builder.build - INFO - Rendering template for module: production using: main.tf.j2 2020-03-20 21:23:04,593 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/production/main.tf 2020-03-20 21:23:04,593 - terraform_builder.build - INFO - Rendering template for module: production using: resources.tf.j2 2020-03-20 21:23:04,620 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/production/resources.tf 2020-03-20 21:23:04,620 - terraform_builder.build - INFO - Rendering template for module: production using: variables.tf.j2 2020-03-20 21:23:04,631 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/production/variables.tf 2020-03-20 21:23:04,632 - terraform_builder.build - INFO - Rendering template for module: staging using: main.tf.j2 2020-03-20 21:23:04,643 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/staging/main.tf 2020-03-20 21:23:04,643 - terraform_builder.build - INFO - Rendering template for module: staging using: resources.tf.j2 2020-03-20 21:23:04,668 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/staging/resources.tf 2020-03-20 21:23:04,668 - terraform_builder.build - INFO - Rendering template for module: staging using: variables.tf.j2 2020-03-20 21:23:04,681 - terraform_builder.build - INFO - Creating: examples/example_builds/example/environments/staging/variables.tf 2020-03-20 21:23:04,682 - terraform_builder.build - INFO - Rendering template for module: network using: main.tf.j2 2020-03-20 21:23:04,694 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/network/main.tf 2020-03-20 21:23:04,694 - terraform_builder.build - INFO - Rendering template for module: network using: resources.tf.j2 2020-03-20 21:23:04,720 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/network/resources.tf 2020-03-20 21:23:04,720 - terraform_builder.build - INFO - Rendering template for module: network using: variables.tf.j2 2020-03-20 21:23:04,732 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/network/variables.tf 2020-03-20 21:23:04,733 - terraform_builder.build - INFO - Rendering template for module: services using: main.tf.j2 2020-03-20 21:23:04,747 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/services/main.tf 2020-03-20 21:23:04,748 - terraform_builder.build - INFO - Rendering template for module: services using: resources.tf.j2 2020-03-20 21:23:04,779 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/services/resources.tf 2020-03-20 21:23:04,779 - terraform_builder.build - INFO - Rendering template for module: services using: variables.tf.j2 2020-03-20 21:23:04,797 - terraform_builder.build - INFO - Creating: examples/example_builds/example/modules/services/variables.tf 2020-03-20 21:23:04,797 - terraform_builder.specs.important.files - INFO - configs: {'project_name': 'example', 'backends': {'local': {}, 'remote': {}}, 'environments': {'development': {}, 'production': {}, 'staging': {}}, 'global_variables': {}, 'modules': {'root': {}, 'network': {}, 'services': {}}, 'providers': {'AzureRM': {'variables': {'azurerm_environment': {'type': 'string', 'description': 'AzureRM Environment', 'default': 'public'}, 'azurerm_features': {'description': 'Customize the behaviour of certain Azure Provider resources.', 'default': {}}, 'azurerm_subscription_id': {'type': 'string', 'description': 'AzureRM Subscription ID', 'default': ''}, 'azurerm_tenant_id': {'type': 'string', 'description': 'AzureRM Tenant ID', 'default': ''}}}, 'DigitalOcean': {'variables': {'do_api_endpoint': {'type': 'string', 'description': 'This can be used to override the base URL for DigitalOcean API requests', 'default': 'https://api.digitalocean.com'}, 'do_image': {'type': 'string', 'description': 'Default DigitalOcean droplet image', 'default': 'ubuntu-18-04-x64'}, 'do_region': {'type': 'string', 'description': 'DigitalOcean region', 'default': 'nyc1'}, 'do_ssh_keys': {'type': 'string', 'description': 'DigitalOcean SSH keys to deploy to new droplets', 'default': []}, 'do_token': {'type': 'string', 'description': 'This is the DO API token', 'default': ''}}}, 'vSphere': {'variables': {'vsphere_allow_unverified_ssl': {'type': 'bool', 'description': 'Boolean that can be set to true to disable SSL certificate verification', 'default': 'false'}, 'vsphere_compute_cluster': {'type': 'string', 'description': 'Compute cluster to use by default', 'default': ''}, 'vsphere_datacenter': {'type': 'string', 'description': 'Datacenter to use by default', 'default': ''}, 'vsphere_network': {'type': 'string', 'description': 'Network to use by default', 'default': ''}, 'vsphere_password': {'type': 'string', 'description': 'Password for vSphere API operations', 'default': ''}, 'vsphere_resource_pool': {'type': 'string', 'description': \"The resource pool to put virtual machine's in\", 'default': ''}, 'vsphere_server': {'type': 'string', 'description': 'vCenter server name for vSphere API operations', 'default': ''}, 'vsphere_username': {'type': 'string', 'description': 'Username for vSphere API operations', 'default': ''}}}}, 'resources': {'projects': {'TerraformCloud': {'description': 'Terraform Cloud Project', 'environment': 'development', 'module': 'root', 'provider': 'DigitalOcean', 'purpose': 'Terraform Cloud Project', 'resources': [], 'tags': ['test']}}, 'vms': {'test-do-root': {'count': 1, 'memory': 1024, 'module': 'root', 'num_cpus': 1, 'provider': 'DigitalOcean', 'tags': ['test-digitalocean', 'test-digitalocean-root']}, 'test-do-network': {'count': 1, 'memory': 1024, 'module': 'network', 'num_cpus': 1, 'provider': 'DigitalOcean', 'tags': ['test-digitalocean', 'test-vsphere-network']}, 'test-vs-root': {'count': 1, 'memory': 2048, 'module': 'root', 'num_cpus': 1, 'provider': 'vSphere', 'tags': ['test-vsphere', 'test-vsphere-root']}, 'test-vs-services': {'count': 1, 'memory': 1024, 'module': 'services', 'num_cpus': 2, 'provider': 'vSphere', 'tags': ['test-vsphere', 'test-vsphere-services']}}}} 2020-03-20 21:23:04,798 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/modules/network/LICENSE.md 2020-03-20 21:23:04,798 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/modules/services/LICENSE.md 2020-03-20 21:23:04,799 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/development/LICENSE.md 2020-03-20 21:23:04,799 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/production/LICENSE.md 2020-03-20 21:23:04,799 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/staging/LICENSE.md 2020-03-20 21:23:04,818 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/modules/network/README.md 2020-03-20 21:23:04,818 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/modules/services/README.md 2020-03-20 21:23:04,819 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/development/README.md 2020-03-20 21:23:04,820 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/production/README.md 2020-03-20 21:23:04,821 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/environments/staging/README.md 2020-03-20 21:23:04,821 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/LICENSE.md 2020-03-20 21:23:04,839 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/README.md 2020-03-20 21:23:04,840 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/.gitignore 2020-03-20 21:23:04,841 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/requirements.txt 2020-03-20 21:23:04,843 - terraform_builder.specs.important.files - INFO - Creating important file: examples/example_builds/example/requirements-dev.txt 2020-03-20 21:23:04,843 - terraform_builder.build - INFO - terraform_path: /usr/local/bin/terraform 2020-03-20 21:23:04,843 - terraform_builder.build - INFO - Initializing config in: examples/example_builds/example 2020-03-20 21:23:05,674 - terraform_builder.build - INFO - terraform init: \u001b[0m\u001b[1mInitializing modules...\u001b[0m \u001b[0m\u001b[1mInitializing the backend...\u001b[0m \u001b[0m\u001b[1mInitializing provider plugins...\u001b[0m The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.azurerm: version = \"~> 2.2\" * provider.digitalocean: version = \"~> 1.15\" * provider.vsphere: version = \"~> 1.16\" \u001b[0m\u001b[1m\u001b[32mTerraform has been successfully initialized!\u001b[0m\u001b[32m\u001b[0m \u001b[0m\u001b[32m You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary.\u001b[0m 2020-03-20 21:23:05,674 - terraform_builder.build - INFO - Validating config in: examples/example_builds/example 2020-03-20 21:23:07,153 - terraform_builder.build - INFO - terraform validate: \u001b[32m\u001b[1mSuccess!\u001b[0m The configuration is valid. \u001b[0m","title":"Executing"},{"location":"usage/#demos","text":"","title":"Demos"},{"location":"usage/#azure","text":"For this demo I'll be walking through building out some resources in Azure. I am using macOS therefore I need to install the Azure CLI tool. I'll also be creating a new project in my $HOME/Playground/Terraform_Project directory.","title":"Azure"},{"location":"usage/#create-project-directory","text":"mkdir -p $HOME/Playground/Terraform_Project","title":"Create project directory"},{"location":"usage/#install-azure-cli","text":"brew install azure-cli","title":"Install Azure CLI"},{"location":"usage/#clone-terraform-builder","text":"cd $HOME/Playground/ git clone https://github.com/mrlesmithjr/terraform-builder.git","title":"Clone Terraform Builder"},{"location":"usage/#azure-service-principal","text":"Next I'll need to create a Service Principal to authenticate with. Let's go ahead and login using the Azure CLI tool. az login You should have been redirected with your browser to authenticate at this point. And if you go back to your terminal you should see something similar to: [ { \"cloudName\": \"AzureCloud\", \"id\": \"00000000-0000-0000-0000-000000000000\", \"isDefault\": true, \"name\": \"PAYG Subscription\", \"state\": \"Enabled\", \"tenantId\": \"00000000-0000-0000-0000-000000000000\", \"user\": { \"name\": \"user@example.com\", \"type\": \"user\" } } ] We are now ready to create the Service Principal. Using the id to replace SUBSCRIPTION_ID below. az ad sp create-for-rbac --role=\"Contributor\" --scopes=\"/subscriptions/SUBSCRIPTION_ID\" You should get back something similar to below: { \"appId\": \"00000000-0000-0000-0000-000000000000\", \"displayName\": \"azure-cli-2017-06-05-10-41-15\", \"name\": \"http://azure-cli-2017-06-05-10-41-15\", \"password\": \"0000-0000-0000-0000-000000000000\", \"tenant\": \"00000000-0000-0000-0000-000000000000\" }","title":"Azure Service Principal"},{"location":"usage/#configs-and-secrets","text":"Now you will need to configure your secrets.yml file to look like below using the SUBSCRIPTION_ID that you received after doing az login . The remaining three fields will be from the information you received after creating the Service Principal. $HOME/Playground/Terraform_Project/secrets.yml : --- # Define secrets - Use with caution secrets: azurerm_client_id: appID azurerm_client_secret: password azurerm_subscription_id: SUBSCRIPTION_ID azurerm_tenant_id: tenant Now we need to configure our configs.yml file to look similar to below: $HOME/Playground/Terraform_Project/configs.yml : --- # This is an example config layout # Defines project name which becomes parent root directory project_name: Terraform-Playground # Define backends backends: local: {} remote: {} # Defines environments environments: development: {} production: {} staging: {} # Define modules - Structure will be project_name/modules/{module} # root needs to always exist modules: root: {} # Define providers and variables providers: AzureRM: resources: resource_groups: example-rg-root: create: true module: root virtual_networks: {} # example-net: # address_space: # - 10.0.0.0/16 # create: true # subnets: # - 10.0.1.0/24 # - 10.0.2.0/24 vms: {} # example-vm-root: # count: 1 # image: ubuntu-18-04-x64 # memory: 1024 # network: example-net # subnet: 10.0.2.0/24 # num_cpus: 1 # tags: { \"environment\": \"${var.environment}\" } variables: azurerm_client_id: type: string description: Default AzureRM client id default: \"\" azurerm_client_secret: type: string description: Default AzureRM client secret default: \"\" azurerm_domain: type: string description: Default AzureRM domain for resources default: \"\" azurerm_environment: type: string description: AzureRM Environment default: public azurerm_features: description: Customize the behaviour of certain Azure Provider resources. default: {} azurerm_image_reference: description: Default OS image reference lookups default: { \"ubuntu-16-04-x64\": { \"publisher\": \"Canonical\", \"offer\": \"UbuntuServer\", \"sku\": \"16.04-LTS\", \"version\": \"latest\", }, \"ubuntu-18-04-x64\": { \"publisher\": \"Canonical\", \"offer\": \"UbuntuServer\", \"sku\": \"18.04-LTS\", \"version\": \"latest\", }, } azurerm_location: type: string description: Default AzureRM location/region default: East US azurerm_subscription_id: type: string description: AzureRM Subscription ID default: \"\" azurerm_tenant_id: type: string description: AzureRM Tenant ID default: \"\"","title":"Configs and Secrets"},{"location":"usage/#build-project","text":"After we've configured our secrets.yml and configs.yml files in our $HOME/Playground/Terraform_Project directory. We are now ready to build our Terraform project. cd $HOME/Playground/terraform-builder We now need to install a few Python packages which are required and we will do so in a Python virtual environment. First, create Python virtual environment: python3 -m venv venv Next activate the Python virtual environment: source venv/bin/activate Now let's install the required Python packages: pip3 install -r requirements.txt Once this has completed we are ready to build our project. python -m terraform_builder --config $HOME/Playground/Terraform_Project/configs.yml --secrets $HOME/Playground/Terraform_Project/secrets.yml --outputdir $HOME/Playground/Terraform_Project ... Initializing modules... Initializing the backend... Initializing provider plugins... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.azurerm: version = \"~> 2.2\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Success! The configuration is valid. (venv) Success! Now we are ready to start using Terraform in our project directory. cd $HOME/Playground/Terraform_Project/Terraform-Playground Let's do a quick terraform plan and see what all is going to be done. terraform plan ... Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_resource_group.example_rg_root will be created + resource \"azurerm_resource_group\" \"example_rg_root\" { + id = (known after apply) + location = \"eastus\" + name = \"example-rg-root\" } Plan: 1 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Note: You didn't specify an \"-out\" parameter to save this plan, so Terraform can't guarantee that exactly these actions will be performed if \"terraform apply\" is subsequently run. So far so good. Let's go ahead and do a terraform apply now: terraform apply ... An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_resource_group.example_rg_root will be created + resource \"azurerm_resource_group\" \"example_rg_root\" { + id = (known after apply) + location = \"eastus\" + name = \"example-rg-root\" } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes azurerm_resource_group.example_rg_root: Creating... azurerm_resource_group.example_rg_root: Creation complete after 1s [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. The state of your infrastructure has been saved to the path below. This state is required to modify and destroy your infrastructure, so keep it safe. To inspect the complete state use the `terraform show` command. State path: terraform.tfstate Boom. We've successfully created our very first resource group in Azure using Terraform Builder. The awesome part was we did not need to dig into the Terraform configurations at all to get everything configured. Now let's go ahead and create our virtual network. Open up configs.yml and uncomment the virtual_networks section so our providers AzureRM configuration now looks like: providers: AzureRM: resources: resource_groups: example-rg-root: create: true module: root virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 After uncommenting the virtual_networks , run Terraform Builder again: python -m terraform_builder --config $HOME/Playground/Terraform_Project/configs.yml --secrets $HOME/Playground/Terraform_Project/secrets.yml --outputdir $HOME/Playground/Terraform_Project And now run terraform plan again and we should see the following: terraform plan ... Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. azurerm_resource_group.example_rg_root: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root] ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_subnet.example_net_subnet_0 will be created + resource \"azurerm_subnet\" \"example_net_subnet_0\" { + address_prefix = \"10.0.1.0/24\" + enforce_private_link_endpoint_network_policies = false + enforce_private_link_service_network_policies = false + id = (known after apply) + name = \"example-net_subnet_0\" + resource_group_name = \"example-rg-root\" + virtual_network_name = \"example-net\" } # azurerm_subnet.example_net_subnet_1 will be created + resource \"azurerm_subnet\" \"example_net_subnet_1\" { + address_prefix = \"10.0.2.0/24\" + enforce_private_link_endpoint_network_policies = false + enforce_private_link_service_network_policies = false + id = (known after apply) + name = \"example-net_subnet_1\" + resource_group_name = \"example-rg-root\" + virtual_network_name = \"example-net\" } # azurerm_virtual_network.example_net will be created + resource \"azurerm_virtual_network\" \"example_net\" { + address_space = [ + \"10.0.0.0/16\", ] + id = (known after apply) + location = \"eastus\" + name = \"example-net\" + resource_group_name = \"example-rg-root\" + subnet { + address_prefix = (known after apply) + id = (known after apply) + name = (known after apply) + security_group = (known after apply) } } Plan: 3 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Note: You didn't specify an \"-out\" parameter to save this plan, so Terraform can't guarantee that exactly these actions will be performed if \"terraform apply\" is subsequently run. Looks good. So, let's apply this configuration now. terraform apply ... azurerm_resource_group.example_rg_root: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_subnet.example_net_subnet_0 will be created + resource \"azurerm_subnet\" \"example_net_subnet_0\" { + address_prefix = \"10.0.1.0/24\" + enforce_private_link_endpoint_network_policies = false + enforce_private_link_service_network_policies = false + id = (known after apply) + name = \"example-net_subnet_0\" + resource_group_name = \"example-rg-root\" + virtual_network_name = \"example-net\" } # azurerm_subnet.example_net_subnet_1 will be created + resource \"azurerm_subnet\" \"example_net_subnet_1\" { + address_prefix = \"10.0.2.0/24\" + enforce_private_link_endpoint_network_policies = false + enforce_private_link_service_network_policies = false + id = (known after apply) + name = \"example-net_subnet_1\" + resource_group_name = \"example-rg-root\" + virtual_network_name = \"example-net\" } # azurerm_virtual_network.example_net will be created + resource \"azurerm_virtual_network\" \"example_net\" { + address_space = [ + \"10.0.0.0/16\", ] + id = (known after apply) + location = \"eastus\" + name = \"example-net\" + resource_group_name = \"example-rg-root\" + subnet { + address_prefix = (known after apply) + id = (known after apply) + name = (known after apply) + security_group = (known after apply) } } Plan: 3 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes azurerm_virtual_network.example_net: Creating... azurerm_virtual_network.example_net: Still creating... [10s elapsed] azurerm_virtual_network.example_net: Creation complete after 13s [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net] azurerm_subnet.example_net_subnet_1: Creating... azurerm_subnet.example_net_subnet_0: Creating... azurerm_subnet.example_net_subnet_0: Creation complete after 1s [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_0] azurerm_subnet.example_net_subnet_1: Creation complete after 2s [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_1] Apply complete! Resources: 3 added, 0 changed, 0 destroyed. The state of your infrastructure has been saved to the path below. This state is required to modify and destroy your infrastructure, so keep it safe. To inspect the complete state use the `terraform show` command. State path: terraform.tfstate BOOOOOM!! Now let's create a VM. So, uncomment the vms section in configs.yml for the AzureRM provider. After doing so, our provider configuration should look like: providers: AzureRM: resources: resource_groups: example-rg-root: create: true module: root virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 vms: example-vm-root: count: 1 image: ubuntu-18-04-x64 memory: 1024 network: example-net subnet: 10.0.2.0/24 num_cpus: 1 tags: { \"environment\": \"${var.environment}\" } After uncommenting the vms , run Terraform Builder again: python -m terraform_builder --config $HOME/Playground/Terraform_Project/configs.yml --secrets $HOME/Playground/Terraform_Project/secrets.yml --outputdir $HOME/Playground/Terraform_Project And now run terraform plan again and we should see the following: terraform plan ... Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. azurerm_resource_group.example_rg_root: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root] azurerm_virtual_network.example_net: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net] azurerm_subnet.example_net_subnet_1: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_1] azurerm_subnet.example_net_subnet_0: Refreshing state... [id=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_0] ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_network_interface.example_vm_root[0] will be created + resource \"azurerm_network_interface\" \"example_vm_root\" { + applied_dns_servers = (known after apply) + dns_servers = (known after apply) + enable_accelerated_networking = false + enable_ip_forwarding = false + id = (known after apply) + internal_dns_name_label = (known after apply) + location = \"eastus\" + mac_address = (known after apply) + name = \"example-vm-root-01-nic\" + private_ip_address = (known after apply) + private_ip_addresses = (known after apply) + resource_group_name = \"example-rg-root\" + virtual_machine_id = (known after apply) + ip_configuration { + name = \"example-vm-root-01-ip-config\" + primary = (known after apply) + private_ip_address = (known after apply) + private_ip_address_allocation = \"dynamic\" + private_ip_address_version = \"IPv4\" + subnet_id = \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg-root/providers/Microsoft.Network/virtualNetworks/example-net/subnets/example-net_subnet_1\" } } # azurerm_virtual_machine.example_vm_root[0] will be created + resource \"azurerm_virtual_machine\" \"example_vm_root\" { + availability_set_id = (known after apply) + delete_data_disks_on_termination = false + delete_os_disk_on_termination = false + id = (known after apply) + license_type = (known after apply) + location = \"eastus\" + name = \"example-vm-root-01-\" + network_interface_ids = (known after apply) + resource_group_name = \"example-rg-root\" + tags = { + \"environment\" = \"\" } + vm_size = \"Standard_DS1_v2\" + identity { + identity_ids = (known after apply) + principal_id = (known after apply) + type = (known after apply) } + storage_data_disk { + caching = (known after apply) + create_option = (known after apply) + disk_size_gb = (known after apply) + lun = (known after apply) + managed_disk_id = (known after apply) + managed_disk_type = (known after apply) + name = (known after apply) + vhd_uri = (known after apply) + write_accelerator_enabled = (known after apply) } + storage_image_reference { + offer = \"UbuntuServer\" + publisher = \"Canonical\" + sku = \"18.04-LTS\" + version = \"latest\" } + storage_os_disk { + caching = \"ReadWrite\" + create_option = \"FromImage\" + disk_size_gb = (known after apply) + managed_disk_id = (known after apply) + managed_disk_type = \"Standard_LRS\" + name = \"example-vm-root-01-\" + os_type = (known after apply) + write_accelerator_enabled = false } } Plan: 2 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Note: You didn't specify an \"-out\" parameter to save this plan, so Terraform can't guarantee that exactly these actions will be performed if \"terraform apply\" is subsequently run. Now let's run terraform apply once again! terraform apply And once this has completed you SHOULD have your VMs up and running.","title":"Build Project"},{"location":"example_builds/example/","text":"Terraform Project - example Welcome to your example project. The following details outline this project. NOTE: Ensure that you do not put any secret variables anywhere other than in secrets.yml and use the --secrets argument. The variables in this outline SHOULD only contain non-private information. Environments Environments represent such things as: development , staging , and production . development: variables: azurerm_location: East US do_region: nyc1 production: variables: azurerm_location: West US 2 do_region: sfo2 staging: variables: azurerm_location: North Central US do_region: ams3 Backends NOTE: From https://www.terraform.io/docs/backends/index.html A backend in Terraform determines how state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc. By default, Terraform uses the local backend, which is the normal behavior of Terraform you're used to. local: path: terraform.tfstate remote: {} Providers NOTE: From https://www.terraform.io/docs/providers/index.html Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Almost any infrastructure type can be represented as a resource in Terraform. A provider is responsible for understanding API interactions and exposing resources. Providers generally are an IaaS (e.g. Alibaba Cloud, AWS, GCP, Microsoft Azure, OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Cloud, DNSimple, Cloudflare). Resources NOTE: From https://www.terraform.io/docs/configuration/resources.html Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records. AzureRM: resources: resource_groups: example-rg-root: create: true module: root virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 vms: example-vm-root: count: 1 image: ubuntu-18-04-x64 memory: 1024 network: example-net num_cpus: 1 subnet: 10.0.2.0/24 tags: environment: ${var.environment} variables: azurerm_client_id: default: '' description: Default AzureRM client id type: string azurerm_client_secret: default: '' description: Default AzureRM client secret type: string azurerm_domain: default: '' description: Default AzureRM domain for resources type: string azurerm_environment: default: public description: AzureRM Environment type: string azurerm_features: default: {} description: Customize the behaviour of certain Azure Provider resources. azurerm_image_reference: default: ubuntu-16-04-x64: offer: UbuntuServer publisher: Canonical sku: 16.04-LTS version: latest ubuntu-18-04-x64: offer: UbuntuServer publisher: Canonical sku: 18.04-LTS version: latest description: Default OS image reference lookups azurerm_location: default: '' description: Default AzureRM location/region type: string azurerm_subscription_id: default: '' description: AzureRM Subscription ID type: string azurerm_tenant_id: default: '' description: AzureRM Tenant ID type: string DigitalOcean: resources: firewalls: default: modules: - root name: default-server-rules rules: - direction: inbound port_range: 22 protocol: tcp source_addresses: [] - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound protocol: icmp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: tcp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: udp tags: - default-firewall web: create: true modules: - root name: web-server-rules rules: - direction: inbound port_range: 22 protocol: tcp source_addresses: [] - direction: inbound port_range: 80 protocol: tcp source_addresses: [] - direction: inbound port_range: 443 protocol: tcp source_addresses: [] - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound protocol: icmp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: tcp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: udp projects: example: create: true description: Example project module: root purpose: Just to demonstrate an example project tags: - default-firewall - example-digitalocean vms: example-vm: count: 1 firewall: default image: ubuntu-18-04-x64 memory: 1024 module: root num_cpus: 1 private_networking: true tags: - example-digitalocean variables: do_api_endpoint: default: https://api.digitalocean.com description: This can be used to override the base URL for DigitalOcean API requests type: string do_domain: default: '' description: Default DigitalOcean domain for resources type: string do_region: default: '' description: DigitalOcean region type: string do_ssh_keys: default: [] description: DigitalOcean SSH keys to deploy to new droplets do_token: default: '' description: This is the DO API token type: string vSphere: resources: datacenters: example-dc: clusters: example-cluster: create: true drs_automation_level: fullyAutomated drs_enabled: true ha_enabled: true hosts: example-esxi-01: create: true hostname: 10.10.10.1 vms: example-vm: count: 1 memory: 2048 network: example-pg num_cpus: 1 tags: - example-vsphere template: '' example-vm-from-template: count: 1 memory: 2048 network: example-network num_cpus: 1 tags: - example-vsphere template: ubuntu-18-04-x64 create: true module: root networks: - example-network templates: - ubuntu-16-04-x64 - ubuntu-18-04-x64 virtual_switches: example-switch: active_nics: - vmnic0 create: true network_adapters: - vmnic0 - vmnic1 port_groups: example-pg: create: true standby_nics: - vmnic1 teaming_policy: loadbalance_srcid type: host tag_categories: example-category: associable_types: - ClusterComputeResource - Datacenter - Datastore - HostSystem - VirtualMachine cardinality: SINGLE create: true module: root tags: - example-vsphere variables: vsphere_allow_unverified_ssl: default: 'false' description: Boolean that can be set to true to disable SSL certificate verification type: bool vsphere_host_password: default: '' description: Password for vSphere hosts type: string vsphere_host_username: default: '' description: Username for vSphere hosts type: string vsphere_password: default: '' description: Password for vSphere API operations type: string vsphere_server: default: '' description: vCenter server name for vSphere API operations type: string vsphere_username: default: '' description: Username for vSphere API operations type: string Modules NOTE: From https://www.terraform.io/docs/modules/index.html A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects. network: variables: do_domain: network.example.org do_ssh_keys: - 12121212 root: variables: do_domain: example.org do_ssh_keys: - 12121212 services: variables: do_domain: services.example.org do_ssh_keys: - 12121212 Project Structure example |-- LICENSE.md |-- README.md |-- environments | |-- development | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- production | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- staging | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- main.tf |-- modules | |-- root | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- network | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- services | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- requirements-dev.txt |-- requirements.txt |-- resources.tf |-- variables.tf Terraform Graph Below is a graph of your Terraform configuration. NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example"},{"location":"example_builds/example/#terraform-project-example","text":"Welcome to your example project. The following details outline this project. NOTE: Ensure that you do not put any secret variables anywhere other than in secrets.yml and use the --secrets argument. The variables in this outline SHOULD only contain non-private information.","title":"Terraform Project - example"},{"location":"example_builds/example/#environments","text":"Environments represent such things as: development , staging , and production . development: variables: azurerm_location: East US do_region: nyc1 production: variables: azurerm_location: West US 2 do_region: sfo2 staging: variables: azurerm_location: North Central US do_region: ams3","title":"Environments"},{"location":"example_builds/example/#backends","text":"NOTE: From https://www.terraform.io/docs/backends/index.html A backend in Terraform determines how state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc. By default, Terraform uses the local backend, which is the normal behavior of Terraform you're used to. local: path: terraform.tfstate remote: {}","title":"Backends"},{"location":"example_builds/example/#providers","text":"NOTE: From https://www.terraform.io/docs/providers/index.html Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Almost any infrastructure type can be represented as a resource in Terraform. A provider is responsible for understanding API interactions and exposing resources. Providers generally are an IaaS (e.g. Alibaba Cloud, AWS, GCP, Microsoft Azure, OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Cloud, DNSimple, Cloudflare).","title":"Providers"},{"location":"example_builds/example/#resources","text":"NOTE: From https://www.terraform.io/docs/configuration/resources.html Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records. AzureRM: resources: resource_groups: example-rg-root: create: true module: root virtual_networks: example-net: address_space: - 10.0.0.0/16 create: true subnets: - 10.0.1.0/24 - 10.0.2.0/24 vms: example-vm-root: count: 1 image: ubuntu-18-04-x64 memory: 1024 network: example-net num_cpus: 1 subnet: 10.0.2.0/24 tags: environment: ${var.environment} variables: azurerm_client_id: default: '' description: Default AzureRM client id type: string azurerm_client_secret: default: '' description: Default AzureRM client secret type: string azurerm_domain: default: '' description: Default AzureRM domain for resources type: string azurerm_environment: default: public description: AzureRM Environment type: string azurerm_features: default: {} description: Customize the behaviour of certain Azure Provider resources. azurerm_image_reference: default: ubuntu-16-04-x64: offer: UbuntuServer publisher: Canonical sku: 16.04-LTS version: latest ubuntu-18-04-x64: offer: UbuntuServer publisher: Canonical sku: 18.04-LTS version: latest description: Default OS image reference lookups azurerm_location: default: '' description: Default AzureRM location/region type: string azurerm_subscription_id: default: '' description: AzureRM Subscription ID type: string azurerm_tenant_id: default: '' description: AzureRM Tenant ID type: string DigitalOcean: resources: firewalls: default: modules: - root name: default-server-rules rules: - direction: inbound port_range: 22 protocol: tcp source_addresses: [] - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound protocol: icmp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: tcp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: udp tags: - default-firewall web: create: true modules: - root name: web-server-rules rules: - direction: inbound port_range: 22 protocol: tcp source_addresses: [] - direction: inbound port_range: 80 protocol: tcp source_addresses: [] - direction: inbound port_range: 443 protocol: tcp source_addresses: [] - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound protocol: icmp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: tcp - destination_addresses: - 0.0.0.0/0 - ::/0 direction: outbound port_range: 1-65535 protocol: udp projects: example: create: true description: Example project module: root purpose: Just to demonstrate an example project tags: - default-firewall - example-digitalocean vms: example-vm: count: 1 firewall: default image: ubuntu-18-04-x64 memory: 1024 module: root num_cpus: 1 private_networking: true tags: - example-digitalocean variables: do_api_endpoint: default: https://api.digitalocean.com description: This can be used to override the base URL for DigitalOcean API requests type: string do_domain: default: '' description: Default DigitalOcean domain for resources type: string do_region: default: '' description: DigitalOcean region type: string do_ssh_keys: default: [] description: DigitalOcean SSH keys to deploy to new droplets do_token: default: '' description: This is the DO API token type: string vSphere: resources: datacenters: example-dc: clusters: example-cluster: create: true drs_automation_level: fullyAutomated drs_enabled: true ha_enabled: true hosts: example-esxi-01: create: true hostname: 10.10.10.1 vms: example-vm: count: 1 memory: 2048 network: example-pg num_cpus: 1 tags: - example-vsphere template: '' example-vm-from-template: count: 1 memory: 2048 network: example-network num_cpus: 1 tags: - example-vsphere template: ubuntu-18-04-x64 create: true module: root networks: - example-network templates: - ubuntu-16-04-x64 - ubuntu-18-04-x64 virtual_switches: example-switch: active_nics: - vmnic0 create: true network_adapters: - vmnic0 - vmnic1 port_groups: example-pg: create: true standby_nics: - vmnic1 teaming_policy: loadbalance_srcid type: host tag_categories: example-category: associable_types: - ClusterComputeResource - Datacenter - Datastore - HostSystem - VirtualMachine cardinality: SINGLE create: true module: root tags: - example-vsphere variables: vsphere_allow_unverified_ssl: default: 'false' description: Boolean that can be set to true to disable SSL certificate verification type: bool vsphere_host_password: default: '' description: Password for vSphere hosts type: string vsphere_host_username: default: '' description: Username for vSphere hosts type: string vsphere_password: default: '' description: Password for vSphere API operations type: string vsphere_server: default: '' description: vCenter server name for vSphere API operations type: string vsphere_username: default: '' description: Username for vSphere API operations type: string","title":"Resources"},{"location":"example_builds/example/#modules","text":"NOTE: From https://www.terraform.io/docs/modules/index.html A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects. network: variables: do_domain: network.example.org do_ssh_keys: - 12121212 root: variables: do_domain: example.org do_ssh_keys: - 12121212 services: variables: do_domain: services.example.org do_ssh_keys: - 12121212","title":"Modules"},{"location":"example_builds/example/#project-structure","text":"example |-- LICENSE.md |-- README.md |-- environments | |-- development | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- production | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- staging | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- main.tf |-- modules | |-- root | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- network | | |-- LICENSE.md | | |-- README.md | | |-- main.tf | | |-- resources.tf | | |-- variables.tf | |-- services | |-- LICENSE.md | |-- README.md | |-- main.tf | |-- resources.tf | |-- variables.tf |-- requirements-dev.txt |-- requirements.txt |-- resources.tf |-- variables.tf","title":"Project Structure"},{"location":"example_builds/example/#terraform-graph","text":"Below is a graph of your Terraform configuration. NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Graph"},{"location":"example_builds/example/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/development/","text":"Terraform Project - example - Module development Module Info development: variables: azurerm_location: East US do_region: nyc1 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module development"},{"location":"example_builds/example/environments/development/#terraform-project-example-module-development","text":"","title":"Terraform Project - example - Module development"},{"location":"example_builds/example/environments/development/#module-info","text":"development: variables: azurerm_location: East US do_region: nyc1 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/development/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/production/","text":"Terraform Project - example - Module production Module Info production: variables: azurerm_location: West US 2 do_region: sfo2 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module production"},{"location":"example_builds/example/environments/production/#terraform-project-example-module-production","text":"","title":"Terraform Project - example - Module production"},{"location":"example_builds/example/environments/production/#module-info","text":"production: variables: azurerm_location: West US 2 do_region: sfo2 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/production/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/environments/staging/","text":"Terraform Project - example - Module staging Module Info staging: variables: azurerm_location: North Central US do_region: ams3 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module staging"},{"location":"example_builds/example/environments/staging/#terraform-project-example-module-staging","text":"","title":"Terraform Project - example - Module staging"},{"location":"example_builds/example/environments/staging/#module-info","text":"staging: variables: azurerm_location: North Central US do_region: ams3 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/environments/staging/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/modules/network/","text":"Terraform Project - example - Module network Module Info network: variables: do_domain: network.example.org do_ssh_keys: - 12121212 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module network"},{"location":"example_builds/example/modules/network/#terraform-project-example-module-network","text":"","title":"Terraform Project - example - Module network"},{"location":"example_builds/example/modules/network/#module-info","text":"network: variables: do_domain: network.example.org do_ssh_keys: - 12121212 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/modules/network/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/modules/services/","text":"Terraform Project - example - Module services Module Info services: variables: do_domain: services.example.org do_ssh_keys: - 12121212 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module services"},{"location":"example_builds/example/modules/services/#terraform-project-example-module-services","text":"","title":"Terraform Project - example - Module services"},{"location":"example_builds/example/modules/services/#module-info","text":"services: variables: do_domain: services.example.org do_ssh_keys: - 12121212 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/modules/services/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"},{"location":"example_builds/example/root/","text":"Terraform Project - example - Module root Module Info root: variables: do_domain: example.org do_ssh_keys: - 12121212 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Terraform Project - example - Module root"},{"location":"example_builds/example/root/#terraform-project-example-module-root","text":"","title":"Terraform Project - example - Module root"},{"location":"example_builds/example/root/#module-info","text":"root: variables: do_domain: example.org do_ssh_keys: - 12121212 NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"Module Info"},{"location":"example_builds/example/root/LICENSE/","text":"NOTE: Generated using https://github.com/mrlesmithjr/terraform-builder","title":"LICENSE"}]}